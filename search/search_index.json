{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome everyone to PyCap! \u00a4 The new and growing community of Python enthusiasts and professionals across Capgemini. Info We are running the first course of 2021: Introduction to Python This course will serve as an introduction to Python and an opportunity for everyone to dip their toes into programming. This course will provide you with the knowledge to begin using Python on project or for your own personal projects. We hope you will enjoy your stay with us and be part of this growing community. var news = document.getElementById('news') if (new Date() < new Date(news.getAttribute('end_date'))) { news.style.display = 'block' } Get to know Python \u00a4 Python is a popular and is an easy to learn, powerful programming language. It is used for many things, such as: Software Development Web Application Scripting AI and Machine Learning As you can see, lots of cool and interesting things to build Getting Started \u00a4 Instant development environment \u00a4 We will be using repl.it for this course. It is an online development playground that let you start without any of the hassels to setup. Trust me, I wish I know about it when I was learning Python. To immediately get access to a development environment click here , this should set you up with a repl.it IDE in your browser with all the code in this course. It should look very similar to the below image. Working locally \u00a4 If you are a little bit brave and interested in working locally on your laptop, you can set up the development environment with the programs listed below First ensure you have git , VSCode and Python (3.6+) installed, open up your terminal/command prompt and run the following Python (Ensure you download Python 3.6+) VSCode Git Now you're ready to clone the PyCap repo and open it in vscode git clone https://github.com/CapgeminiInventIDE/PyCap.git code PyCap","title":"Welcome"},{"location":"#welcome-everyone-to-pycap","text":"The new and growing community of Python enthusiasts and professionals across Capgemini. Info We are running the first course of 2021: Introduction to Python This course will serve as an introduction to Python and an opportunity for everyone to dip their toes into programming. This course will provide you with the knowledge to begin using Python on project or for your own personal projects. We hope you will enjoy your stay with us and be part of this growing community. var news = document.getElementById('news') if (new Date() < new Date(news.getAttribute('end_date'))) { news.style.display = 'block' }","title":"Welcome everyone to PyCap!"},{"location":"#get-to-know-python","text":"Python is a popular and is an easy to learn, powerful programming language. It is used for many things, such as: Software Development Web Application Scripting AI and Machine Learning As you can see, lots of cool and interesting things to build","title":"Get to know Python"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#instant-development-environment","text":"We will be using repl.it for this course. It is an online development playground that let you start without any of the hassels to setup. Trust me, I wish I know about it when I was learning Python. To immediately get access to a development environment click here , this should set you up with a repl.it IDE in your browser with all the code in this course. It should look very similar to the below image.","title":"Instant development environment"},{"location":"#working-locally","text":"If you are a little bit brave and interested in working locally on your laptop, you can set up the development environment with the programs listed below First ensure you have git , VSCode and Python (3.6+) installed, open up your terminal/command prompt and run the following Python (Ensure you download Python 3.6+) VSCode Git Now you're ready to clone the PyCap repo and open it in vscode git clone https://github.com/CapgeminiInventIDE/PyCap.git code PyCap","title":"Working locally"},{"location":"about_us/","text":"About Us \u00a4 Capgemini Invent combines strategy, technology, data science and creative design to solve the most complex business and technology challenges. \u00a4 Disruption is not new, but the pace of change is. The fourth industrial revolution is forcing businesses to rethink everything they know. Leading organizations behave as living entities, constantly adapting to change. With invention at their core, they continuously redesign their business to generate new sources of value. Winning is about fostering inventive thinking to create what comes next. Invent. Build. Transform. \u00a4 This is why we have created Capgemini Invent, Capgemini\u2019s new digital innovation, consulting and transformation global business line. Our multi-disciplinary team helps business leaders find new sources of value. We accelerate the process of turning ideas into prototypes and scalable real-world solutions; leveraging the full business and technology expertise of the Capgemini Group to implement at speed and scale. The result is a coordinated approach to transformation, enabling businesses to create the products, services, customer experiences, and business models of the future. We're Hiring! \u00a4 Do you want to be part of the team that builds doc_loader and other great products at Capgemini Invent? If so, you're in luck! Capgemini Invent is currently hiring Data Scientists who love using data to drive their decisions. Take a look at our open positions and see if you're a fit.","title":"About Us"},{"location":"about_us/#about-us","text":"","title":"About Us"},{"location":"about_us/#capgemini-invent-combines-strategy-technology-data-science-and-creative-design-to-solve-the-most-complex-business-and-technology-challenges","text":"Disruption is not new, but the pace of change is. The fourth industrial revolution is forcing businesses to rethink everything they know. Leading organizations behave as living entities, constantly adapting to change. With invention at their core, they continuously redesign their business to generate new sources of value. Winning is about fostering inventive thinking to create what comes next.","title":"Capgemini Invent combines strategy, technology, data science and creative design to solve the most complex business and technology challenges."},{"location":"about_us/#invent-build-transform","text":"This is why we have created Capgemini Invent, Capgemini\u2019s new digital innovation, consulting and transformation global business line. Our multi-disciplinary team helps business leaders find new sources of value. We accelerate the process of turning ideas into prototypes and scalable real-world solutions; leveraging the full business and technology expertise of the Capgemini Group to implement at speed and scale. The result is a coordinated approach to transformation, enabling businesses to create the products, services, customer experiences, and business models of the future.","title":"Invent. Build. Transform."},{"location":"about_us/#were-hiring","text":"Do you want to be part of the team that builds doc_loader and other great products at Capgemini Invent? If so, you're in luck! Capgemini Invent is currently hiring Data Scientists who love using data to drive their decisions. Take a look at our open positions and see if you're a fit.","title":"We're Hiring!"},{"location":"certified/","text":"Certified Members \u00a4 Introduction to Python \u00a4 Tim Sanderson Certificate: View my certificate on Badgr! Capstone: View my capstone on Github!","title":"Certified Members"},{"location":"certified/#certified-members","text":"","title":"Certified Members"},{"location":"certified/#introduction-to-python","text":"Tim Sanderson Certificate: View my certificate on Badgr! Capstone: View my capstone on Github!","title":"Introduction to Python"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at andy.challis@capgemini.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at andy.challis@capgemini.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Become a Mentor \u00a4 Mentors are required to guide students in their PyCap courses. This typically involves answering questions about Python or the course material, helping debug Python code, designing and assessing CapStone projects, and contributing to the course material. As such, mentors should have mastered the basics of Python programming and be able to build functional code for a wide range of mid-level complexity problems. You can request to become a mentor for the next PyCap course if you believe you meet the above requirements. Speak on a Special Topic \u00a4 If there is a Python-based topic that you are familiar with and are passionate about, and that you believe would be interesting or helpful to the class attendees, you can request to host a class on the topic as part of our Special Topics series. These classes are aimed at people who have completed the Introduction to Python course. Write course content \u00a4 You can request to contribute course content for additional topics that are not already covered in the courses. Other contributions \u00a4 If you would like to make any other contributions to the PyCap materials (for example, to correct typos), you may do so by submitting a pull request to the PyCap repository : Fork the repository Create a branch in your own fork: git checkout -b <branch_name> . Make your changes and commit them: git commit -m '<commit_message>' Push to the original branch: git push origin <project_name>/<location> Create the pull request back to our fork. If you would like to become a mentor, speak on a special topic or write course content, send a request to Andy Challis at andy.challis@capgemini.com .","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#become-a-mentor","text":"Mentors are required to guide students in their PyCap courses. This typically involves answering questions about Python or the course material, helping debug Python code, designing and assessing CapStone projects, and contributing to the course material. As such, mentors should have mastered the basics of Python programming and be able to build functional code for a wide range of mid-level complexity problems. You can request to become a mentor for the next PyCap course if you believe you meet the above requirements.","title":"Become a Mentor"},{"location":"contributing/#speak-on-a-special-topic","text":"If there is a Python-based topic that you are familiar with and are passionate about, and that you believe would be interesting or helpful to the class attendees, you can request to host a class on the topic as part of our Special Topics series. These classes are aimed at people who have completed the Introduction to Python course.","title":"Speak on a Special Topic"},{"location":"contributing/#write-course-content","text":"You can request to contribute course content for additional topics that are not already covered in the courses.","title":"Write course content"},{"location":"contributing/#other-contributions","text":"If you would like to make any other contributions to the PyCap materials (for example, to correct typos), you may do so by submitting a pull request to the PyCap repository : Fork the repository Create a branch in your own fork: git checkout -b <branch_name> . Make your changes and commit them: git commit -m '<commit_message>' Push to the original branch: git push origin <project_name>/<location> Create the pull request back to our fork. If you would like to become a mentor, speak on a special topic or write course content, send a request to Andy Challis at andy.challis@capgemini.com .","title":"Other contributions"},{"location":"license/","text":"Mozilla Public License Version 2.0 \u00a4 Copyright (c) 2020, Capgemini Invent IDE All rights reserved. 1. Definitions \u00a4 1.1. \"Contributor\" means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \"Contributor Version\" means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor's Contribution. 1.3. \"Contribution\" means Covered Software of a particular Contributor. 1.4. \"Covered Software\" means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \"Incompatible With Secondary Licenses\" means (a) that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or (b) that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \"Executable Form\" means any form of the work other than Source Code Form. 1.7. \"Larger Work\" means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \"License\" means this document. 1.9. \"Licensable\" means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \"Modifications\" means any of the following: (a) any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or (b) any new file in Source Code Form that contains any Covered Software. 1.11. \"Patent Claims\" of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \"Secondary License\" means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \"Source Code Form\" means the form of the work preferred for making modifications. 1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising rights under this License. For legal entities, \"You\" includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity. 2. License Grants and Conditions \u00a4 2.1. Grants Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: (a) under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and (b) under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version. 2.2. Effective Date The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution. 2.3. Limitations on Grant Scope The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: (a) for any code that a Contributor has removed from Covered Software; or (b) for infringements caused by: (i) Your and any other third party's modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or (c) under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4). 2.4. Subsequent Licenses No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3). 2.5. Representation Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License. 2.6. Fair Use This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents. 2.7. Conditions Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1. 3. Responsibilities \u00a4 3.1. Distribution of Source Form All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form. 3.2. Distribution of Executable Form If You distribute Covered Software in Executable Form then: (a) such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and (b) You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients' rights in the Source Code Form under this License. 3.3. Distribution of a Larger Work You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s). 3.4. Notices You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies. 3.5. Application of Additional Terms You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction. 4. Inability to Comply Due to Statute or Regulation \u00a4 If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it. 5. Termination \u00a4 5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination. * Disclaimer of Warranty * ------------------------- * * Covered Software is provided under this License on an \"as is\" * basis, without warranty of any kind, either expressed, implied, or * statutory, including, without limitation, warranties that the * Covered Software is free of defects, merchantable, fit for a * particular purpose or non-infringing. The entire risk as to the * quality and performance of the Covered Software is with You. * Should any Covered Software prove defective in any respect, You * (not any Contributor) assume the cost of any necessary servicing, * repair, or correction. This disclaimer of warranty constitutes an * essential part of this License. No use of any Covered Software is * authorized under this License except under this disclaimer. * * * Limitation of Liability * -------------------------- * * Under no circumstances and under no legal theory, whether tort * (including negligence), contract, or otherwise, shall any * Contributor, or anyone who distributes Covered Software as * permitted above, be liable to You for any direct, indirect, * special, incidental, or consequential damages of any character * including, without limitation, damages for lost profits, loss of * goodwill, work stoppage, computer failure or malfunction, or any * and all other commercial damages or losses, even if such party * shall have been informed of the possibility of such damages. This * limitation of liability shall not apply to liability for death or * personal injury resulting from such party's negligence to the * extent applicable law prohibits such limitation. Some * jurisdictions do not allow the exclusion or limitation of * incidental or consequential damages, so this exclusion and * limitation may not apply to You. * * 8. Litigation \u00a4 Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims. 9. Miscellaneous \u00a4 This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor. 10. Versions of the License \u00a4 10.1. New Versions Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number. 10.2. Effect of New Versions You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward. 10.3. Modified Versions If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License). 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached. Exhibit A - Source Code Form License Notice \u00a4 This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership. Exhibit B - \"Incompatible With Secondary Licenses\" Notice \u00a4 This Source Code Form is \"Incompatible With Secondary Licenses\", as defined by the Mozilla Public License, v. 2.0.","title":"License"},{"location":"license/#mozilla-public-license-version-20","text":"Copyright (c) 2020, Capgemini Invent IDE All rights reserved.","title":"Mozilla Public License Version 2.0"},{"location":"license/#1-definitions","text":"1.1. \"Contributor\" means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \"Contributor Version\" means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor's Contribution. 1.3. \"Contribution\" means Covered Software of a particular Contributor. 1.4. \"Covered Software\" means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \"Incompatible With Secondary Licenses\" means (a) that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or (b) that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \"Executable Form\" means any form of the work other than Source Code Form. 1.7. \"Larger Work\" means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \"License\" means this document. 1.9. \"Licensable\" means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \"Modifications\" means any of the following: (a) any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or (b) any new file in Source Code Form that contains any Covered Software. 1.11. \"Patent Claims\" of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \"Secondary License\" means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \"Source Code Form\" means the form of the work preferred for making modifications. 1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising rights under this License. For legal entities, \"You\" includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.","title":"1. Definitions"},{"location":"license/#2-license-grants-and-conditions","text":"2.1. Grants Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: (a) under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and (b) under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version. 2.2. Effective Date The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution. 2.3. Limitations on Grant Scope The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: (a) for any code that a Contributor has removed from Covered Software; or (b) for infringements caused by: (i) Your and any other third party's modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or (c) under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4). 2.4. Subsequent Licenses No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3). 2.5. Representation Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License. 2.6. Fair Use This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents. 2.7. Conditions Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.","title":"2. License Grants and Conditions"},{"location":"license/#3-responsibilities","text":"3.1. Distribution of Source Form All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form. 3.2. Distribution of Executable Form If You distribute Covered Software in Executable Form then: (a) such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and (b) You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients' rights in the Source Code Form under this License. 3.3. Distribution of a Larger Work You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s). 3.4. Notices You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies. 3.5. Application of Additional Terms You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.","title":"3. Responsibilities"},{"location":"license/#4-inability-to-comply-due-to-statute-or-regulation","text":"If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.","title":"4. Inability to Comply Due to Statute or Regulation"},{"location":"license/#5-termination","text":"5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination. * Disclaimer of Warranty * ------------------------- * * Covered Software is provided under this License on an \"as is\" * basis, without warranty of any kind, either expressed, implied, or * statutory, including, without limitation, warranties that the * Covered Software is free of defects, merchantable, fit for a * particular purpose or non-infringing. The entire risk as to the * quality and performance of the Covered Software is with You. * Should any Covered Software prove defective in any respect, You * (not any Contributor) assume the cost of any necessary servicing, * repair, or correction. This disclaimer of warranty constitutes an * essential part of this License. No use of any Covered Software is * authorized under this License except under this disclaimer. * * * Limitation of Liability * -------------------------- * * Under no circumstances and under no legal theory, whether tort * (including negligence), contract, or otherwise, shall any * Contributor, or anyone who distributes Covered Software as * permitted above, be liable to You for any direct, indirect, * special, incidental, or consequential damages of any character * including, without limitation, damages for lost profits, loss of * goodwill, work stoppage, computer failure or malfunction, or any * and all other commercial damages or losses, even if such party * shall have been informed of the possibility of such damages. This * limitation of liability shall not apply to liability for death or * personal injury resulting from such party's negligence to the * extent applicable law prohibits such limitation. Some * jurisdictions do not allow the exclusion or limitation of * incidental or consequential damages, so this exclusion and * limitation may not apply to You. * *","title":"5. Termination"},{"location":"license/#8-litigation","text":"Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims.","title":"8. Litigation"},{"location":"license/#9-miscellaneous","text":"This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.","title":"9. Miscellaneous"},{"location":"license/#10-versions-of-the-license","text":"10.1. New Versions Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number. 10.2. Effect of New Versions You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward. 10.3. Modified Versions If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License). 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.","title":"10. Versions of the License"},{"location":"license/#exhibit-a-source-code-form-license-notice","text":"This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership.","title":"Exhibit A - Source Code Form License Notice"},{"location":"license/#exhibit-b-incompatible-with-secondary-licenses-notice","text":"This Source Code Form is \"Incompatible With Secondary Licenses\", as defined by the Mozilla Public License, v. 2.0.","title":"Exhibit B - \"Incompatible With Secondary Licenses\" Notice"},{"location":"mentors/","text":"Our Mentors \u00a4 Andy Challis Andy is a full stack data scientist, having experience in technologies such as AWS/GCP, React/Frontend, Docker/Kubernetes, Python/Javascript/Go/Swift and many libraries within such as PyTorch/Flask/FastAPI/Pandas/SkLearn. He drives rapid innovation of projects for clients by leveraging data assets and data science techniques and is the lead for the Capgemini Australia Python Community 2019-2021 Courses intro-to-python/course-1 intro-to-python/course-2 Tim Sanderson Tim is a data scientist whose primary experience lies with python, docker, MLFlow and python libraries like FastAPI, Pandas and Pytorch. He enjoys bringing data, code and people together to drive unique solutions Courses intro-to-python/course-1 Eromanga Adermann Ero is a Consultant within the Invent-IDE capability. She has a strong technical problem-solving background from her doctorate degree in physics, where she studied dark energy and found new ways to uncover its properties. She also has experience building innovative solutions to real-world problems, through her participation in GovHacks 2019 and the ACS Hackathon 2020 (both of which she won awards for). She has developed scripts to automate the distribution of employee dashboards, process and restructure employee data, and is currently part of the team building an AI document processing ecosystem for the Federal Government. Courses intro-to-python/course-1 Palang Anivan Palang has a background in Software Engineering and is passionate about everything technology. Always down for some good old hackathons, keeping things exciting and try to look for a new way to apply new innovation to existing problems or learn about new-leading edge technology, specifically in emerging technology or anything cool really :D. Courses intro-to-python/course-1 Nima Namjouyan A Data scientist passionate about Python, image processing and computer vision. Love topics in image/doc classification and multiprocessing. Courses intro-to-python/course-1 Lockie Richter Lockie is a Software Engineer with experience in C++, Java, Python and small amounts of React. He is passionate about writing good code that is maintainable, functional and extensible. Courses intro-to-python/course-1","title":"Mentors"},{"location":"mentors/#our-mentors","text":"Andy Challis Andy is a full stack data scientist, having experience in technologies such as AWS/GCP, React/Frontend, Docker/Kubernetes, Python/Javascript/Go/Swift and many libraries within such as PyTorch/Flask/FastAPI/Pandas/SkLearn. He drives rapid innovation of projects for clients by leveraging data assets and data science techniques and is the lead for the Capgemini Australia Python Community 2019-2021 Courses intro-to-python/course-1 intro-to-python/course-2 Tim Sanderson Tim is a data scientist whose primary experience lies with python, docker, MLFlow and python libraries like FastAPI, Pandas and Pytorch. He enjoys bringing data, code and people together to drive unique solutions Courses intro-to-python/course-1 Eromanga Adermann Ero is a Consultant within the Invent-IDE capability. She has a strong technical problem-solving background from her doctorate degree in physics, where she studied dark energy and found new ways to uncover its properties. She also has experience building innovative solutions to real-world problems, through her participation in GovHacks 2019 and the ACS Hackathon 2020 (both of which she won awards for). She has developed scripts to automate the distribution of employee dashboards, process and restructure employee data, and is currently part of the team building an AI document processing ecosystem for the Federal Government. Courses intro-to-python/course-1 Palang Anivan Palang has a background in Software Engineering and is passionate about everything technology. Always down for some good old hackathons, keeping things exciting and try to look for a new way to apply new innovation to existing problems or learn about new-leading edge technology, specifically in emerging technology or anything cool really :D. Courses intro-to-python/course-1 Nima Namjouyan A Data scientist passionate about Python, image processing and computer vision. Love topics in image/doc classification and multiprocessing. Courses intro-to-python/course-1 Lockie Richter Lockie is a Software Engineer with experience in C++, Java, Python and small amounts of React. He is passionate about writing good code that is maintainable, functional and extensible. Courses intro-to-python/course-1","title":"Our Mentors"},{"location":"advanced-python/course-1/","text":"","title":"Course 1"},{"location":"intro-to-python/summary/","text":"Course: Introduction to Python \u00a4 Come and join the Capgemini Python community! PyCap Start date: 9th March 2021 12:30 AEST Instructors: Andy Challis & Tim Sanderson Applicant limit: 50 Prerequisites: None - just an interest to learn new things L&D hours: 7.5, plus up to 12.5 additional hours for capstone completion Note: PyCap will be hosting another intro to Python course later in the year for those who cannot attend or if we are at capacity. Description \u00a4 This course aims to provide you with the knowledge to begin using Python on a project or for your own personal projects. We will delve into the history of programming and explain why it is best to design software in a certain way. The course will also include on-project experience from a variety of different backgrounds, with use cases from across the broader Capgemini group. There are links to courses and materials to help you in your journey of mastering python as well as problems to test your understanding and hone your practical knowledge. Course structure \u00a4 The course will run for 5 weeks starting at (9th March 2021 12:30 AEST). Along with the course content in the sessions we will add in recommended follow along self paced learning. There will be a final capstone project at the end with a 2 week deadline for submissions. Mentors will be available for any questions through Teams and will have dedicated times for drop in sessions. Content \u00a4 We will cover Python concepts like: Getting Python installed Data structures Control flow Functional programming OOP (object oriented programming) Building commandline applications Development tools (linting, testing, formatting) Type hinting Modern python functionality (3.6+) Webscraping Using external libraries Next steps \u00a4 PyCap will be hosting a Python mini series later in the year with a more specific focus on topics such as: Advanced Python concepts and building your own Python package Working with databases Scaling Python applications - async, muti-threading/processing and containerization Building and deploying API's into production Advanced unit testing Deploying Deep Learning models Training and Deploying Classical Machine Learning models Advanced webscraping - getting past bot detection, password walls, etc Principles of programming Interactive data visualization Introduction to pandas and data analysis Advanced networking - working with websockets, apis, queues","title":"Summary"},{"location":"intro-to-python/summary/#course-introduction-to-python","text":"Come and join the Capgemini Python community! PyCap Start date: 9th March 2021 12:30 AEST Instructors: Andy Challis & Tim Sanderson Applicant limit: 50 Prerequisites: None - just an interest to learn new things L&D hours: 7.5, plus up to 12.5 additional hours for capstone completion Note: PyCap will be hosting another intro to Python course later in the year for those who cannot attend or if we are at capacity.","title":"Course: Introduction to Python"},{"location":"intro-to-python/summary/#description","text":"This course aims to provide you with the knowledge to begin using Python on a project or for your own personal projects. We will delve into the history of programming and explain why it is best to design software in a certain way. The course will also include on-project experience from a variety of different backgrounds, with use cases from across the broader Capgemini group. There are links to courses and materials to help you in your journey of mastering python as well as problems to test your understanding and hone your practical knowledge.","title":"Description"},{"location":"intro-to-python/summary/#course-structure","text":"The course will run for 5 weeks starting at (9th March 2021 12:30 AEST). Along with the course content in the sessions we will add in recommended follow along self paced learning. There will be a final capstone project at the end with a 2 week deadline for submissions. Mentors will be available for any questions through Teams and will have dedicated times for drop in sessions.","title":"Course structure"},{"location":"intro-to-python/summary/#content","text":"We will cover Python concepts like: Getting Python installed Data structures Control flow Functional programming OOP (object oriented programming) Building commandline applications Development tools (linting, testing, formatting) Type hinting Modern python functionality (3.6+) Webscraping Using external libraries","title":"Content"},{"location":"intro-to-python/summary/#next-steps","text":"PyCap will be hosting a Python mini series later in the year with a more specific focus on topics such as: Advanced Python concepts and building your own Python package Working with databases Scaling Python applications - async, muti-threading/processing and containerization Building and deploying API's into production Advanced unit testing Deploying Deep Learning models Training and Deploying Classical Machine Learning models Advanced webscraping - getting past bot detection, password walls, etc Principles of programming Interactive data visualization Introduction to pandas and data analysis Advanced networking - working with websockets, apis, queues","title":"Next steps"},{"location":"intro-to-python/week-1.0/","text":"Data Structures \u00a4 Key Info Created date 02/02/2021 Previous knowledge None What you will learn Booleans Strings Integers Floats Lists Sets Dictionaries Mentors Learning resources Coursera follow along course (Weeks 4, 5, 6) Real Python - Data Types CodeWars - Is he gonna survive? CodeWars - Remove First and Last Character CodeWars - Name Shuffler CodeWars - Vowel remover CodeWars - Total amount of points CodeWars - DNA to RNA Conversion CodeWars - Can we divide it? CodeWars - HQ9+ CodeWars - Chuck Norris Approved CodeWars - Drink About CodeWars - Sort & Transform Description \u00a4 In this session we will be looking at data structures. We will discuss how and when they can be used within your Python programs. Facts for the session \u00a4 The etymology of the word \"string\" dates back to the days of the printing press, where characters or \"font\" as they were called back then were assembled to put together to form a stamp that could be pressed against paper with ink to form a page for a book. When the printing press companies charged for their services, they would charge in the length of characters in feet. To do this they would string together the characters required. Hence the use of \"string\" for multiple characters put together! This is also where the words \"uppercase, lowercase and font\" come from, both upper and lowercase from the position where the fonts were stored - in the top or bottom cases and \"font\" comes from the french word \"fonte\" which means \"something that has been melted; a casting\". Python's mantra, otherwise called the \"Zen of Python\" is below, the most important part is the first 4 lines. Python aims to be simple for you to read and write, code that follows this mantra is called \"Pythonic\". import this \"\"\" Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \"\"\" Comments \u00a4 A comment in Python is given by a preceding # sign and it will be ignored by Python. They can either be inline or have their own line. # Creating a variable with the string \"Andy\" name = \"Andy\" # An inline comment about this line Useful inbuilt functions to deal with types \u00a4 The built-in function type allows us to check what type an object is type ( True ) # This gives - bool type ( 1 ) # This gives - int type ( 1.0 ) # This gives - float type ( \"Hello\" ) # This gives - str type ([]) # This gives - list type ({}) # This gives - dict type ( set ()) # This gives - set We can also use the built-in function isinstance which will do a logical check if the object we give it is what we are expecting. isinstance ( False , bool ) # This gives - True isinstance ( 1 , int ) # This gives - True isinstance ( 1.0 , float ) # This gives - True isinstance ( \"Hello\" , str ) # This gives - True isinstance ([], list ) # This gives - True isinstance ({}, dict ) # This gives - True isinstance ( set (), set ) # This gives - True isinstance ( False , dict ) # This gives - False isinstance ( 1 , str ) # This gives - False isinstance ( 1.0 , int ) # This gives - False isinstance ( \"Hello\" , bool ) # This gives - False isinstance ([], dict ) # This gives - False isinstance ({}, set ) # This gives - False isinstance ( set (), float ) # This gives - False Operators \u00a4 + is the add ition operator - is the sub traction operator / is the div ision operator * is the mul tiplication operator ** is the pow er operator // is the floor div ision operator % is the mod ulo operator These are the basic operators in Python and they will do different things depending on the types of values you have on either side of the operator. Let's look at a few examples: Example 1 : Integer + Integer print ( 4 + 5 ) # This gives 9, so uses normal arithmetic. Example 2 : String + String print ( \"Hello \" + \"World\" ) # This gives \"Hello World\", so uses concatenation. Example 3 : Int + String print ( 1 + \"World\" ) # This gives an error as it is not defined how an integer can add a string. The aim of the above examples are to show that operators on their own don't mean anything, it is dependant only on what the operator means to that data type. Later on in the series we will explore \"dunder\" methods, short for double underscore methods. These are special methods that an object can have to implement different python operators. For example __add__ implements the add ition operator for a class. Numbers \u00a4 Integers, Floats \u00a4 For the most part, integers and floats are interchangeable and you can treat any operators that they use to be just like using a calculator. However, there will be times when you will need to make sure the number is an integer or a float. To do this we can convert between the types. int ( 2.2 ) # This gives - 2 float ( 2 ) # This gives - 2.0 int ( 2.8 ) # This gives - 2 float ( - 1 ) # This gives -1.0 One reason why we must have an integer rather than a float would be in a list. If we have a shopping list of groceries, what would it mean to get the 2.5'th item in the list? It wouldn't make sense, but to get the 2nd item would. Booleans \u00a4 Booleans are just logical values and can either be True or False , if we use these in mathematical operations they will equate to 1 and 0 respectively. Later on in the session we will look at conditional statements and how we can control the flow of our program based on logic. Strings \u00a4 As mentioned in the beginning strings are just a series of characters put together. There are many things we can do with strings that are helpful to building custom programs. For example, using someones name we can make a custom dashboard for them where they feel like it was tailored to themselves. A string can be represented using single or double quotes ( ' or \" ) these will allow a string to be made all in one line. There is also a multiline string which is given by triple-single or triple-double quotes ( ''' , or \"\"\" ) For example: name = \"Andy Challis\" weather = 'Sunny' poem = \"\"\"Do not stand at my grave and weep I am not there; I do not sleep. I am a thousand winds that blow, I am the diamond glints on snow, I am the sun on ripened grain, I am the gentle autumn rain. When you awaken in the morning's hush I am the swift uplifting rush Of quiet birds in circled flight. I am the soft stars that shine at night. Do not stand at my grave and cry, I am not there; I did not die.\"\"\" second_poem = '''Hold fast to dreams For if dreams die Life is a broken-winged bird That cannot fly. Hold fast to dreams For when dreams go Life is a barren field Frozen with snow.''' String formatting \u00a4 One should avoid using the string concatenation technique as shown earlier, as it can lead to code that is hard to read, eg: \"Hello \" + name + \", the outlook for the weather today looks like it will be \" + weather . Instead we can make use of string formatting and there are a few ways to do this in Python. Example 1 - Using the f-string, this is the best practice at the time of writing and I would suggest making use of this as much as possible as it allows you to write expressions inside the string. name = \"Andy Challis\" weather = \"Sunny\" f \"Hello { name } , the outlook for the weather today looks like it will be { weather } \" Example 2 - Using the .format() this was the previous best practice before Python 3.6, it is still able to be used. However, if you read the string you need to go to the end to understand what is being added into the formatted string. You can use the second example but this is more terse that using f-strings. name = \"Andy Challis\" weather = \"Sunny\" \"Hello {} , the outlook for the weather today looks like it will be {} \" . format ( name , weather ) # OR \"Hello {name} , the outlook for the weather today looks like it will be {weather} \" . format ( name = name , weather = weather ) Example 3 - Using the % this is old school Python string formatting syntax you may still see around, %s stands for string to come in, %d means a number will be coming in name = \"Andy Challis\" weather = \"Sunny\" \"Hello %s , the outlook for the weather today looks like it will be %s \" % ( name , weather ) age = 99 \"You are %d years old\" % age Lists, Sets and Tuples \u00a4 Lists \u00a4 A list is just like you imagined, you can have a list of items each having their own position in the list which you can \"index\" by a number eg the 3rd item of the list. In Python we use a zero index, therefor the \"2nd item\" of a list would be index 1 as the first would be index 0. A list can be defined using square brackets [] , this is an empty list and has no items inside it. we can add in other data types into our list and in Python it doesn't matter what is in the list! You can have floats, integers, strings, whatever you want! Lets make a shopping list as an example. shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] Notice that you can have the same string in there like our apples, in this shopping list we could see that we need to get 3 apples, one milk and one pear. We can add items to the list using .append and we can remove items from the list with .remove shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] shopping_list . remove ( \"Apple\" ) print ( shopping_list ) # This gives ['Apple', 'Apple', 'Milk', 'Pear'] shopping_list . append ( \"Banana\" ) print ( shopping_list ) # This gives ['Apple', 'Apple', 'Milk', 'Pear', 'Banana'] Tuples \u00a4 Now if we are to look at tuples which look like a list but are denoted with a rounded bracket () , we cannot do these kind of operations as tuples are immutable meaning we cannot change them info = ( \"Andy Challis\" , \"Male\" ) Sets \u00a4 Again sets are much like lists, except you can only have at most one of each item. For example the shopping list given before if it were converted to a set would be ['Pear', 'Apple', 'Milk'] . This is great if we only care about storing unique items. shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] print ( set ( shopping_list )) # This gives ['Pear', 'Apple', 'Milk'] Dictionaries \u00a4 Dictionaries are a data type that allows us to store something in that we can quickly look up, much like the oxford english dictionary. If we want to find out the meaning of a word then we find that word in the dictionary and look at its meaning. Notice how fast it is to find meanings of words once you know how to use a dictionary! This is the same in programming, under the hood it uses something called a hash table where is associates a hash key with some value. Lets make our own corporate dictionary. Dictionaries are given by the curly braces {} and have keys and values separated by a colon : CORP = { \"IDE\" : \"Insight Driven Enterprise\" , \"I&D\" : \"Insights and Data\" , \"P&O\" : \"People and Organization\" , \"APAC\" : \"Asia Pacific\" , } We can look up information from out dictionary using the keys as an index like so print ( CORP [ \"IDE\" ]) # This gives \"Insight Driven Enterprise\" We can store any data type as the values in a dictionary too profile = { \"name\" : \"Insight Driven Enterprise\" , \"age\" : 99 , \"male\" : True , }","title":"Data Structures"},{"location":"intro-to-python/week-1.0/#data-structures","text":"Key Info Created date 02/02/2021 Previous knowledge None What you will learn Booleans Strings Integers Floats Lists Sets Dictionaries Mentors Learning resources Coursera follow along course (Weeks 4, 5, 6) Real Python - Data Types CodeWars - Is he gonna survive? CodeWars - Remove First and Last Character CodeWars - Name Shuffler CodeWars - Vowel remover CodeWars - Total amount of points CodeWars - DNA to RNA Conversion CodeWars - Can we divide it? CodeWars - HQ9+ CodeWars - Chuck Norris Approved CodeWars - Drink About CodeWars - Sort & Transform","title":"Data Structures"},{"location":"intro-to-python/week-1.0/#description","text":"In this session we will be looking at data structures. We will discuss how and when they can be used within your Python programs.","title":"Description"},{"location":"intro-to-python/week-1.0/#facts-for-the-session","text":"The etymology of the word \"string\" dates back to the days of the printing press, where characters or \"font\" as they were called back then were assembled to put together to form a stamp that could be pressed against paper with ink to form a page for a book. When the printing press companies charged for their services, they would charge in the length of characters in feet. To do this they would string together the characters required. Hence the use of \"string\" for multiple characters put together! This is also where the words \"uppercase, lowercase and font\" come from, both upper and lowercase from the position where the fonts were stored - in the top or bottom cases and \"font\" comes from the french word \"fonte\" which means \"something that has been melted; a casting\". Python's mantra, otherwise called the \"Zen of Python\" is below, the most important part is the first 4 lines. Python aims to be simple for you to read and write, code that follows this mantra is called \"Pythonic\". import this \"\"\" Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \"\"\"","title":"Facts for the session"},{"location":"intro-to-python/week-1.0/#comments","text":"A comment in Python is given by a preceding # sign and it will be ignored by Python. They can either be inline or have their own line. # Creating a variable with the string \"Andy\" name = \"Andy\" # An inline comment about this line","title":"Comments"},{"location":"intro-to-python/week-1.0/#useful-inbuilt-functions-to-deal-with-types","text":"The built-in function type allows us to check what type an object is type ( True ) # This gives - bool type ( 1 ) # This gives - int type ( 1.0 ) # This gives - float type ( \"Hello\" ) # This gives - str type ([]) # This gives - list type ({}) # This gives - dict type ( set ()) # This gives - set We can also use the built-in function isinstance which will do a logical check if the object we give it is what we are expecting. isinstance ( False , bool ) # This gives - True isinstance ( 1 , int ) # This gives - True isinstance ( 1.0 , float ) # This gives - True isinstance ( \"Hello\" , str ) # This gives - True isinstance ([], list ) # This gives - True isinstance ({}, dict ) # This gives - True isinstance ( set (), set ) # This gives - True isinstance ( False , dict ) # This gives - False isinstance ( 1 , str ) # This gives - False isinstance ( 1.0 , int ) # This gives - False isinstance ( \"Hello\" , bool ) # This gives - False isinstance ([], dict ) # This gives - False isinstance ({}, set ) # This gives - False isinstance ( set (), float ) # This gives - False","title":"Useful inbuilt functions to deal with types"},{"location":"intro-to-python/week-1.0/#operators","text":"+ is the add ition operator - is the sub traction operator / is the div ision operator * is the mul tiplication operator ** is the pow er operator // is the floor div ision operator % is the mod ulo operator These are the basic operators in Python and they will do different things depending on the types of values you have on either side of the operator. Let's look at a few examples: Example 1 : Integer + Integer print ( 4 + 5 ) # This gives 9, so uses normal arithmetic. Example 2 : String + String print ( \"Hello \" + \"World\" ) # This gives \"Hello World\", so uses concatenation. Example 3 : Int + String print ( 1 + \"World\" ) # This gives an error as it is not defined how an integer can add a string. The aim of the above examples are to show that operators on their own don't mean anything, it is dependant only on what the operator means to that data type. Later on in the series we will explore \"dunder\" methods, short for double underscore methods. These are special methods that an object can have to implement different python operators. For example __add__ implements the add ition operator for a class.","title":"Operators"},{"location":"intro-to-python/week-1.0/#numbers","text":"","title":"Numbers"},{"location":"intro-to-python/week-1.0/#integers-floats","text":"For the most part, integers and floats are interchangeable and you can treat any operators that they use to be just like using a calculator. However, there will be times when you will need to make sure the number is an integer or a float. To do this we can convert between the types. int ( 2.2 ) # This gives - 2 float ( 2 ) # This gives - 2.0 int ( 2.8 ) # This gives - 2 float ( - 1 ) # This gives -1.0 One reason why we must have an integer rather than a float would be in a list. If we have a shopping list of groceries, what would it mean to get the 2.5'th item in the list? It wouldn't make sense, but to get the 2nd item would.","title":"Integers, Floats"},{"location":"intro-to-python/week-1.0/#booleans","text":"Booleans are just logical values and can either be True or False , if we use these in mathematical operations they will equate to 1 and 0 respectively. Later on in the session we will look at conditional statements and how we can control the flow of our program based on logic.","title":"Booleans"},{"location":"intro-to-python/week-1.0/#strings","text":"As mentioned in the beginning strings are just a series of characters put together. There are many things we can do with strings that are helpful to building custom programs. For example, using someones name we can make a custom dashboard for them where they feel like it was tailored to themselves. A string can be represented using single or double quotes ( ' or \" ) these will allow a string to be made all in one line. There is also a multiline string which is given by triple-single or triple-double quotes ( ''' , or \"\"\" ) For example: name = \"Andy Challis\" weather = 'Sunny' poem = \"\"\"Do not stand at my grave and weep I am not there; I do not sleep. I am a thousand winds that blow, I am the diamond glints on snow, I am the sun on ripened grain, I am the gentle autumn rain. When you awaken in the morning's hush I am the swift uplifting rush Of quiet birds in circled flight. I am the soft stars that shine at night. Do not stand at my grave and cry, I am not there; I did not die.\"\"\" second_poem = '''Hold fast to dreams For if dreams die Life is a broken-winged bird That cannot fly. Hold fast to dreams For when dreams go Life is a barren field Frozen with snow.'''","title":"Strings"},{"location":"intro-to-python/week-1.0/#string-formatting","text":"One should avoid using the string concatenation technique as shown earlier, as it can lead to code that is hard to read, eg: \"Hello \" + name + \", the outlook for the weather today looks like it will be \" + weather . Instead we can make use of string formatting and there are a few ways to do this in Python. Example 1 - Using the f-string, this is the best practice at the time of writing and I would suggest making use of this as much as possible as it allows you to write expressions inside the string. name = \"Andy Challis\" weather = \"Sunny\" f \"Hello { name } , the outlook for the weather today looks like it will be { weather } \" Example 2 - Using the .format() this was the previous best practice before Python 3.6, it is still able to be used. However, if you read the string you need to go to the end to understand what is being added into the formatted string. You can use the second example but this is more terse that using f-strings. name = \"Andy Challis\" weather = \"Sunny\" \"Hello {} , the outlook for the weather today looks like it will be {} \" . format ( name , weather ) # OR \"Hello {name} , the outlook for the weather today looks like it will be {weather} \" . format ( name = name , weather = weather ) Example 3 - Using the % this is old school Python string formatting syntax you may still see around, %s stands for string to come in, %d means a number will be coming in name = \"Andy Challis\" weather = \"Sunny\" \"Hello %s , the outlook for the weather today looks like it will be %s \" % ( name , weather ) age = 99 \"You are %d years old\" % age","title":"String formatting"},{"location":"intro-to-python/week-1.0/#lists-sets-and-tuples","text":"","title":"Lists, Sets and Tuples"},{"location":"intro-to-python/week-1.0/#lists","text":"A list is just like you imagined, you can have a list of items each having their own position in the list which you can \"index\" by a number eg the 3rd item of the list. In Python we use a zero index, therefor the \"2nd item\" of a list would be index 1 as the first would be index 0. A list can be defined using square brackets [] , this is an empty list and has no items inside it. we can add in other data types into our list and in Python it doesn't matter what is in the list! You can have floats, integers, strings, whatever you want! Lets make a shopping list as an example. shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] Notice that you can have the same string in there like our apples, in this shopping list we could see that we need to get 3 apples, one milk and one pear. We can add items to the list using .append and we can remove items from the list with .remove shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] shopping_list . remove ( \"Apple\" ) print ( shopping_list ) # This gives ['Apple', 'Apple', 'Milk', 'Pear'] shopping_list . append ( \"Banana\" ) print ( shopping_list ) # This gives ['Apple', 'Apple', 'Milk', 'Pear', 'Banana']","title":"Lists"},{"location":"intro-to-python/week-1.0/#tuples","text":"Now if we are to look at tuples which look like a list but are denoted with a rounded bracket () , we cannot do these kind of operations as tuples are immutable meaning we cannot change them info = ( \"Andy Challis\" , \"Male\" )","title":"Tuples"},{"location":"intro-to-python/week-1.0/#sets","text":"Again sets are much like lists, except you can only have at most one of each item. For example the shopping list given before if it were converted to a set would be ['Pear', 'Apple', 'Milk'] . This is great if we only care about storing unique items. shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] print ( set ( shopping_list )) # This gives ['Pear', 'Apple', 'Milk']","title":"Sets"},{"location":"intro-to-python/week-1.0/#dictionaries","text":"Dictionaries are a data type that allows us to store something in that we can quickly look up, much like the oxford english dictionary. If we want to find out the meaning of a word then we find that word in the dictionary and look at its meaning. Notice how fast it is to find meanings of words once you know how to use a dictionary! This is the same in programming, under the hood it uses something called a hash table where is associates a hash key with some value. Lets make our own corporate dictionary. Dictionaries are given by the curly braces {} and have keys and values separated by a colon : CORP = { \"IDE\" : \"Insight Driven Enterprise\" , \"I&D\" : \"Insights and Data\" , \"P&O\" : \"People and Organization\" , \"APAC\" : \"Asia Pacific\" , } We can look up information from out dictionary using the keys as an index like so print ( CORP [ \"IDE\" ]) # This gives \"Insight Driven Enterprise\" We can store any data type as the values in a dictionary too profile = { \"name\" : \"Insight Driven Enterprise\" , \"age\" : 99 , \"male\" : True , }","title":"Dictionaries"},{"location":"intro-to-python/week-1.1/","text":"Functions \u00a4 Key Info Created date 02/02/2021 Previous knowledge Data Structures What you will learn Functions Mentors Learning resources Coursera follow along course (Weeks 4, 5, 6) Real Python - Functions CodeWars - Is he gonna survive? CodeWars - Remove First and Last Character CodeWars - Name Shuffler CodeWars - Vowel remover CodeWars - Total amount of points CodeWars - DNA to RNA Conversion CodeWars - Can we divide it? CodeWars - HQ9+ CodeWars - Chuck Norris Approved CodeWars - Drink About CodeWars - Sort & Transform Description \u00a4 In this session we will be looking at functions. We will discuss how and when they can be used within your Python programs. Functions \u00a4 Why use functions \u00a4 Readable - Reading lots of blocks of code that do the same thing is hard to follow. Writeable - When using functions, you're saving yourself time from copy pasting or typing ou the same thing Reuseable - You can reuse your functions in any other program as long as they are encapsulated How to make functions in Python \u00a4 In Python we can def ine a function using the keyword def followed by the function name, parenthesis and any arguments (sometimes called parameters from mathematics). A function can run pieces of code for us and optionally return a given value. If you do not give a return value then the function will return None . def my_function_name ( argument_1 , argument_2 ): return argument_1 + argument_2 This function can now be called later on in our script as follows: x = 1 y = 2 answer = my_function ( argument_1 = x , argument_2 = y ) print ( answer ) Scope of variables \u00a4 The scope of a variable is referring to where it is stored and whether it is accessible from a certain point. There are two kinds of scope in Python local and global scope. Lets take a look at an example. x = 5 def do_something (): x = 10 print ( x ) print ( x ) # => 5 do_something () # => 10 print ( x ) # => 5 As you can see from the printed output when we use the variable x in the function it is not effecting the x outside of the function. This is what is meant my scope, the x in the function is part of the local scope and the x outside is part of the global scope. We can access the global scoped variable using the global keyword. However, this is generally not a best practice as if you want to alter a global variable you should do this by returning a new variable. x = 5 def do_something (): global x x = 10 print ( x ) print ( x ) # => 5 do_something () # => 10 print ( x ) # => 10 As a quick tip, try using the functions globals() and locals() while inside a function. This will show you what variables are currently in scope. x = 5 def do_something (): x = 10 print ( globals ()) print ( locals ()) do_something () # {'__builtins__': <module '__builtin__' (built-in)>, '__package__': None, 'do_something': <function do_something at 0x10b25e140>, 'x': 5, '__name__': '__main__', '__doc__': None} # {'x': 10} Passing in arguments/parameters \u00a4 We can pass in different arguments (sometimes called parameters from mathematics) into our functions to make use of them from within the local scope. We did this before with the my_function_name function. Positional arguments \u00a4 When calling (using) a function we can make use of the position of which the arguments were givne in when declaring (writing) the function. For example in my_function_name(argument_1, argument_2) we could call the function with positional arguments as follows: x , y = 1 , 2 answer = my_function_name ( x , y ) print ( answer ) This means that argument_1 is given by x which is 1 and argument_2 is given by y which is 2 . Keyword arguments \u00a4 Similarly we can use keyword arguments to call a function, this is where we explicitly say which argument we are using. x , y = 1 , 2 answer = my_function_name ( argument_2 = x , argument_1 = y ) print ( answer ) Notice that now we can add these in in any order, so we can reverse the order as seen above. Note: when using a combination of keyword and positional arguments you must use the positional arguments first and the keyword arguments at the end (see below for an example) x , y = 1 , 2 answer = my_function_name ( x , argument_2 = y ) print ( answer ) Default arguments \u00a4 When declaring a function we can set default arguments, this way we can change them if we like, or we can just use what the developer has suggested as default. For example: def my_function_name ( argument_1 , argument_2 = 5 ): return argument_1 + argument_2 answer = my_function_name ( 2 ) print ( answer ) Or we can use the function just as before def my_function_name ( argument_1 , argument_2 = 5 ): return argument_1 + argument_2 answer = my_function_name ( 2 , 10 ) print ( answer )","title":"Functions"},{"location":"intro-to-python/week-1.1/#functions","text":"Key Info Created date 02/02/2021 Previous knowledge Data Structures What you will learn Functions Mentors Learning resources Coursera follow along course (Weeks 4, 5, 6) Real Python - Functions CodeWars - Is he gonna survive? CodeWars - Remove First and Last Character CodeWars - Name Shuffler CodeWars - Vowel remover CodeWars - Total amount of points CodeWars - DNA to RNA Conversion CodeWars - Can we divide it? CodeWars - HQ9+ CodeWars - Chuck Norris Approved CodeWars - Drink About CodeWars - Sort & Transform","title":"Functions"},{"location":"intro-to-python/week-1.1/#description","text":"In this session we will be looking at functions. We will discuss how and when they can be used within your Python programs.","title":"Description"},{"location":"intro-to-python/week-1.1/#functions_1","text":"","title":"Functions"},{"location":"intro-to-python/week-1.1/#why-use-functions","text":"Readable - Reading lots of blocks of code that do the same thing is hard to follow. Writeable - When using functions, you're saving yourself time from copy pasting or typing ou the same thing Reuseable - You can reuse your functions in any other program as long as they are encapsulated","title":"Why use functions"},{"location":"intro-to-python/week-1.1/#how-to-make-functions-in-python","text":"In Python we can def ine a function using the keyword def followed by the function name, parenthesis and any arguments (sometimes called parameters from mathematics). A function can run pieces of code for us and optionally return a given value. If you do not give a return value then the function will return None . def my_function_name ( argument_1 , argument_2 ): return argument_1 + argument_2 This function can now be called later on in our script as follows: x = 1 y = 2 answer = my_function ( argument_1 = x , argument_2 = y ) print ( answer )","title":"How to make functions in Python"},{"location":"intro-to-python/week-1.1/#scope-of-variables","text":"The scope of a variable is referring to where it is stored and whether it is accessible from a certain point. There are two kinds of scope in Python local and global scope. Lets take a look at an example. x = 5 def do_something (): x = 10 print ( x ) print ( x ) # => 5 do_something () # => 10 print ( x ) # => 5 As you can see from the printed output when we use the variable x in the function it is not effecting the x outside of the function. This is what is meant my scope, the x in the function is part of the local scope and the x outside is part of the global scope. We can access the global scoped variable using the global keyword. However, this is generally not a best practice as if you want to alter a global variable you should do this by returning a new variable. x = 5 def do_something (): global x x = 10 print ( x ) print ( x ) # => 5 do_something () # => 10 print ( x ) # => 10 As a quick tip, try using the functions globals() and locals() while inside a function. This will show you what variables are currently in scope. x = 5 def do_something (): x = 10 print ( globals ()) print ( locals ()) do_something () # {'__builtins__': <module '__builtin__' (built-in)>, '__package__': None, 'do_something': <function do_something at 0x10b25e140>, 'x': 5, '__name__': '__main__', '__doc__': None} # {'x': 10}","title":"Scope of variables"},{"location":"intro-to-python/week-1.1/#passing-in-argumentsparameters","text":"We can pass in different arguments (sometimes called parameters from mathematics) into our functions to make use of them from within the local scope. We did this before with the my_function_name function.","title":"Passing in arguments/parameters"},{"location":"intro-to-python/week-1.1/#positional-arguments","text":"When calling (using) a function we can make use of the position of which the arguments were givne in when declaring (writing) the function. For example in my_function_name(argument_1, argument_2) we could call the function with positional arguments as follows: x , y = 1 , 2 answer = my_function_name ( x , y ) print ( answer ) This means that argument_1 is given by x which is 1 and argument_2 is given by y which is 2 .","title":"Positional arguments"},{"location":"intro-to-python/week-1.1/#keyword-arguments","text":"Similarly we can use keyword arguments to call a function, this is where we explicitly say which argument we are using. x , y = 1 , 2 answer = my_function_name ( argument_2 = x , argument_1 = y ) print ( answer ) Notice that now we can add these in in any order, so we can reverse the order as seen above. Note: when using a combination of keyword and positional arguments you must use the positional arguments first and the keyword arguments at the end (see below for an example) x , y = 1 , 2 answer = my_function_name ( x , argument_2 = y ) print ( answer )","title":"Keyword arguments"},{"location":"intro-to-python/week-1.1/#default-arguments","text":"When declaring a function we can set default arguments, this way we can change them if we like, or we can just use what the developer has suggested as default. For example: def my_function_name ( argument_1 , argument_2 = 5 ): return argument_1 + argument_2 answer = my_function_name ( 2 ) print ( answer ) Or we can use the function just as before def my_function_name ( argument_1 , argument_2 = 5 ): return argument_1 + argument_2 answer = my_function_name ( 2 , 10 ) print ( answer )","title":"Default arguments"},{"location":"intro-to-python/week-1.2/","text":"Control Flow \u00a4 Key Info Created date 02/02/2021 Previous knowledge Data Structures What you will learn If, Elif, Else For Loops While Mentors Learning resources Coursera follow along course (Weeks 4, 5, 6) Real Python - Conditional Statements Real Python - For Loops Real Python - While Loops CodeWars - Is he gonna survive? CodeWars - Remove First and Last Character CodeWars - Name Shuffler CodeWars - Vowel remover CodeWars - Total amount of points CodeWars - DNA to RNA Conversion CodeWars - Can we divide it? CodeWars - HQ9+ CodeWars - Chuck Norris Approved CodeWars - Drink About CodeWars - Sort & Transform Description \u00a4 In this session we will be looking at control flow. We will discuss how and when it can be used within your Python programs. Control Flow \u00a4 Control flow is the order in which individual statements, instructions or function calls of a program are executed or evaluated. We can change the flow of the program so that we get a different outcome, in this next section we will look into some of the most common ways to do this. Conditionals \u00a4 Operators \u00a4 These operators differ from the arithmetic operators defined earlier as they would return different data types depending on what was used, for example 2 * 2.5 would return 5.0 . However, with conditional operators we will always get back a bool (Boolean - True/False) result as we are comparing two values. \"==\" is the eq uality operator \"!=\" is the n ot eq uality operator \"<\", \"<=\" are the l ess t than and the l ess t than or e qual to operators \">\", \">=\" are the g reater t than and the g reater t than or e qual to operators \"is\" is the identity operator \"is not\" is the negated identity operator \"in\" is the membership operator \"not in\" is the negated membership operator If, else if, else \u00a4 Using the above operators, we can combine them with our data structures we discussed earlier to form boolean values, as a result we can then act on those and only run a piece of code if the preceding value was True . Remember Python is sensitive to indents and you must indent your code blocks if 5 < 10 : print ( \"Only runs if 5 is less than 10\" ) This example makes more sense when we use variables as they will change throughout our program apples = 5 if apples > 10 : print ( \"You have too many apples\" ) apples = 20 if apples > 10 : print ( \"You have too many apples\" ) If we want to execute some other piece of code when the expression evaluated to False , then we can make use of if/else apples = 5 if apples > 10 : print ( \"You have too many apples\" ) else : print ( \"Get more apples... An apple a day keeps the doctor away\" ) Finally, if you have multiple comparisons that you want to make you can use elif . apples = - 1 if apples > 10 : print ( \"You have too many apples\" ) elif apples < 0 : print ( \"You cant go into debt with apples!\" ) else : print ( \"Get more apples... An apple a day keeps the doctor away\" ) Loops \u00a4 Another way you can control out programs execution is to perform a series of actions over and over again on repeat. This could be for a fixed number of loops, or indefinitely. For loops \u00a4 If you want to loop over a piece of code for a fixed number of loops then we would make use of a for loop. To use a for loop, you will need to have an iterable (not irritable) data structure, such as a list, dictionary, string or tuple. Lets take the example of a list. shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] for item in shopping_list : print ( item ) Notice we assigned each value in turn to the variable item , we can call this variable whatever we like, but you should always make it make sense, for example, for bird in birds: If we also need to have access to the index of the item in the iterable then we should make use of the inbuilt function enumerate , which will give you a tuple of the position in the iterable and the item itself. shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] for index_with_item in enumerate ( shopping_list ): print ( \"Item:\" , index_with_item [ 1 ]) print ( \"Index:\" , index_with_item [ 0 ]) This is starting to look a little messy, Python has a better way to handle tuple assignment which is called unpacking , which allows you to write the same expression as follows shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] for index , item in enumerate ( shopping_list ): print ( \"Item:\" , item ) print ( \"Index:\" , index ) While loops \u00a4 A while loop is similar to a for loop in that we can loop over a block of code. However, normally we use while for times when we dont have a fixed number of actions to take. In this example we do not know how many loops we will need to take in our program since it is controlled by the users input , so a while loop would be better than a for loop apple_stock = 10 while apple_stock > 0 : bought = input ( f \"How many apples would you like to buy? We have { apple_stock } left in stock\" ) bought = int ( bought ) if bought > apple_stock : print ( f \"I know you asked for { bought } apples, but we only have { apple_stock } apples left. Have a nice day\" ) apple_stock = apple_stock - bought else : print ( f \"Thanks for buying { bought } apples!\" ) apple_stock = apple_stock - bought print ( \"We are out of apple stock\" ) Controlling the loop \u00a4 There are a few ways to control a loop; we can exit through exhaustion or by break ing out of it. We can also skip over some of the cycles, continue with our loops but not run the rest of the code block. shopping_list = [ \"Apple\" , \"Apple\" , \"Lollies\" , \"Apple\" , \"Milk\" , \"Pear\" ] for item in shopping_list : if item == \"Lollies\" : print ( \"You're not allowed to have lollies Jimmy!\" ) continue print ( item ) shopping_list = [ \"Apple\" , \"Apple\" , \"Lollies\" , \"Chocolate\" , \"Apple\" , \"Milk\" , \"Pear\" ] for item in shopping_list : if item == \"Lollies\" : print ( \"You're not allowed to have lollies Jimmy!\" ) continue if item == \"Chocolate\" : print ( \"Jimmy! I said, NO chocolate\" ) break print ( item )","title":"Control Flow"},{"location":"intro-to-python/week-1.2/#control-flow","text":"Key Info Created date 02/02/2021 Previous knowledge Data Structures What you will learn If, Elif, Else For Loops While Mentors Learning resources Coursera follow along course (Weeks 4, 5, 6) Real Python - Conditional Statements Real Python - For Loops Real Python - While Loops CodeWars - Is he gonna survive? CodeWars - Remove First and Last Character CodeWars - Name Shuffler CodeWars - Vowel remover CodeWars - Total amount of points CodeWars - DNA to RNA Conversion CodeWars - Can we divide it? CodeWars - HQ9+ CodeWars - Chuck Norris Approved CodeWars - Drink About CodeWars - Sort & Transform","title":"Control Flow"},{"location":"intro-to-python/week-1.2/#description","text":"In this session we will be looking at control flow. We will discuss how and when it can be used within your Python programs.","title":"Description"},{"location":"intro-to-python/week-1.2/#control-flow_1","text":"Control flow is the order in which individual statements, instructions or function calls of a program are executed or evaluated. We can change the flow of the program so that we get a different outcome, in this next section we will look into some of the most common ways to do this.","title":"Control Flow"},{"location":"intro-to-python/week-1.2/#conditionals","text":"","title":"Conditionals"},{"location":"intro-to-python/week-1.2/#operators","text":"These operators differ from the arithmetic operators defined earlier as they would return different data types depending on what was used, for example 2 * 2.5 would return 5.0 . However, with conditional operators we will always get back a bool (Boolean - True/False) result as we are comparing two values. \"==\" is the eq uality operator \"!=\" is the n ot eq uality operator \"<\", \"<=\" are the l ess t than and the l ess t than or e qual to operators \">\", \">=\" are the g reater t than and the g reater t than or e qual to operators \"is\" is the identity operator \"is not\" is the negated identity operator \"in\" is the membership operator \"not in\" is the negated membership operator","title":"Operators"},{"location":"intro-to-python/week-1.2/#if-else-if-else","text":"Using the above operators, we can combine them with our data structures we discussed earlier to form boolean values, as a result we can then act on those and only run a piece of code if the preceding value was True . Remember Python is sensitive to indents and you must indent your code blocks if 5 < 10 : print ( \"Only runs if 5 is less than 10\" ) This example makes more sense when we use variables as they will change throughout our program apples = 5 if apples > 10 : print ( \"You have too many apples\" ) apples = 20 if apples > 10 : print ( \"You have too many apples\" ) If we want to execute some other piece of code when the expression evaluated to False , then we can make use of if/else apples = 5 if apples > 10 : print ( \"You have too many apples\" ) else : print ( \"Get more apples... An apple a day keeps the doctor away\" ) Finally, if you have multiple comparisons that you want to make you can use elif . apples = - 1 if apples > 10 : print ( \"You have too many apples\" ) elif apples < 0 : print ( \"You cant go into debt with apples!\" ) else : print ( \"Get more apples... An apple a day keeps the doctor away\" )","title":"If, else if, else"},{"location":"intro-to-python/week-1.2/#loops","text":"Another way you can control out programs execution is to perform a series of actions over and over again on repeat. This could be for a fixed number of loops, or indefinitely.","title":"Loops"},{"location":"intro-to-python/week-1.2/#for-loops","text":"If you want to loop over a piece of code for a fixed number of loops then we would make use of a for loop. To use a for loop, you will need to have an iterable (not irritable) data structure, such as a list, dictionary, string or tuple. Lets take the example of a list. shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] for item in shopping_list : print ( item ) Notice we assigned each value in turn to the variable item , we can call this variable whatever we like, but you should always make it make sense, for example, for bird in birds: If we also need to have access to the index of the item in the iterable then we should make use of the inbuilt function enumerate , which will give you a tuple of the position in the iterable and the item itself. shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] for index_with_item in enumerate ( shopping_list ): print ( \"Item:\" , index_with_item [ 1 ]) print ( \"Index:\" , index_with_item [ 0 ]) This is starting to look a little messy, Python has a better way to handle tuple assignment which is called unpacking , which allows you to write the same expression as follows shopping_list = [ \"Apple\" , \"Apple\" , \"Apple\" , \"Milk\" , \"Pear\" ] for index , item in enumerate ( shopping_list ): print ( \"Item:\" , item ) print ( \"Index:\" , index )","title":"For loops"},{"location":"intro-to-python/week-1.2/#while-loops","text":"A while loop is similar to a for loop in that we can loop over a block of code. However, normally we use while for times when we dont have a fixed number of actions to take. In this example we do not know how many loops we will need to take in our program since it is controlled by the users input , so a while loop would be better than a for loop apple_stock = 10 while apple_stock > 0 : bought = input ( f \"How many apples would you like to buy? We have { apple_stock } left in stock\" ) bought = int ( bought ) if bought > apple_stock : print ( f \"I know you asked for { bought } apples, but we only have { apple_stock } apples left. Have a nice day\" ) apple_stock = apple_stock - bought else : print ( f \"Thanks for buying { bought } apples!\" ) apple_stock = apple_stock - bought print ( \"We are out of apple stock\" )","title":"While loops"},{"location":"intro-to-python/week-1.2/#controlling-the-loop","text":"There are a few ways to control a loop; we can exit through exhaustion or by break ing out of it. We can also skip over some of the cycles, continue with our loops but not run the rest of the code block. shopping_list = [ \"Apple\" , \"Apple\" , \"Lollies\" , \"Apple\" , \"Milk\" , \"Pear\" ] for item in shopping_list : if item == \"Lollies\" : print ( \"You're not allowed to have lollies Jimmy!\" ) continue print ( item ) shopping_list = [ \"Apple\" , \"Apple\" , \"Lollies\" , \"Chocolate\" , \"Apple\" , \"Milk\" , \"Pear\" ] for item in shopping_list : if item == \"Lollies\" : print ( \"You're not allowed to have lollies Jimmy!\" ) continue if item == \"Chocolate\" : print ( \"Jimmy! I said, NO chocolate\" ) break print ( item )","title":"Controlling the loop"},{"location":"intro-to-python/week-2.0/","text":"Using User Defined, Internal and External Libraries \u00a4 Key Info Created date 02/02/2021 Previous knowledge None What you will learn import Packages User Defined Packages Pip Standard Library Mentors Learning resources Coursera follow along course (Weeks 1, 2, 3) Real Python - Introduction Description \u00a4 Desc... Importing functionality \u00a4 Now we have covered off how to define our own functions we may want to use these throughout our python program. We may also want to make use of external python packages and the functionality they offer. This can be done using the import keyword at the beginning of the python file. It will look for user defined modules, installed modules and standard library modules and bring in the functionality of that script. External and standard library modules \u00a4 When using any packages you haven't written it is generally best to look online for documentation on how to make use of the library's functionality. For example, if we look for the documentation of the pathlib library we can see that we can make use of Path by using from pathlib import Path . Likewise for a package we may have installed, such as Pillow we can see that we can import the Image functionality as from PIL import Image . These would be added to the beginning of our program if we wish to make use of them in our script. Note that it is best practice to group your import statements into the following sequence: Standard libraries (functionality you haven't installed) External libraries (functionality you have installed into your system) User defined modules (functionality you have created in your filesystem) So far our file is looking like this: from pathlib import Path from PIL import Image User defined modules \u00a4 If we want to make use of our functionality between files and folders then this is where user-defined modules comes into play. Lets make a file called main.py and a file called welcome.py and add our welcome user function into welcome.py . If we are now working on main.py and want to make use of the functionality inside welcome.py we can do this as follows: import welcome print ( welcome . welcome_user ( \"Andy\" )) We could also import it using import and from to indicate that we just want to import the specific functionality proceeding the import keyword. This will also remove the welcome namespace from welcome import welcome_user print ( welcome_user ( \"Andy\" )) Finally we can also make use of folders to subdivide our work into, lets copy the welcome.py file into a folder called utils . We will also look at the as keyword, which lets us define what it will be called from in our script. from utils.welcome import welcome_user as wu print ( wu ( \"Andy\" )) This as keyword is often used with libraries such as numpy and pandas ( import numpy as np or import pandas as pd ) and it just saves us typing out the full name.","title":"Using User Defined, Internal and External Libraries"},{"location":"intro-to-python/week-2.0/#using-user-defined-internal-and-external-libraries","text":"Key Info Created date 02/02/2021 Previous knowledge None What you will learn import Packages User Defined Packages Pip Standard Library Mentors Learning resources Coursera follow along course (Weeks 1, 2, 3) Real Python - Introduction","title":"Using User Defined, Internal and External Libraries"},{"location":"intro-to-python/week-2.0/#description","text":"Desc...","title":"Description"},{"location":"intro-to-python/week-2.0/#importing-functionality","text":"Now we have covered off how to define our own functions we may want to use these throughout our python program. We may also want to make use of external python packages and the functionality they offer. This can be done using the import keyword at the beginning of the python file. It will look for user defined modules, installed modules and standard library modules and bring in the functionality of that script.","title":"Importing functionality"},{"location":"intro-to-python/week-2.0/#external-and-standard-library-modules","text":"When using any packages you haven't written it is generally best to look online for documentation on how to make use of the library's functionality. For example, if we look for the documentation of the pathlib library we can see that we can make use of Path by using from pathlib import Path . Likewise for a package we may have installed, such as Pillow we can see that we can import the Image functionality as from PIL import Image . These would be added to the beginning of our program if we wish to make use of them in our script. Note that it is best practice to group your import statements into the following sequence: Standard libraries (functionality you haven't installed) External libraries (functionality you have installed into your system) User defined modules (functionality you have created in your filesystem) So far our file is looking like this: from pathlib import Path from PIL import Image","title":"External and standard library modules"},{"location":"intro-to-python/week-2.0/#user-defined-modules","text":"If we want to make use of our functionality between files and folders then this is where user-defined modules comes into play. Lets make a file called main.py and a file called welcome.py and add our welcome user function into welcome.py . If we are now working on main.py and want to make use of the functionality inside welcome.py we can do this as follows: import welcome print ( welcome . welcome_user ( \"Andy\" )) We could also import it using import and from to indicate that we just want to import the specific functionality proceeding the import keyword. This will also remove the welcome namespace from welcome import welcome_user print ( welcome_user ( \"Andy\" )) Finally we can also make use of folders to subdivide our work into, lets copy the welcome.py file into a folder called utils . We will also look at the as keyword, which lets us define what it will be called from in our script. from utils.welcome import welcome_user as wu print ( wu ( \"Andy\" )) This as keyword is often used with libraries such as numpy and pandas ( import numpy as np or import pandas as pd ) and it just saves us typing out the full name.","title":"User defined modules"},{"location":"intro-to-python/week-2.1/","text":"Object Oriented Programming \u00a4 Key Info Created date 02/02/2021 Previous knowledge None What you will learn Object Oriented Programming OOP Encapsulation Polymorphism None Mentors Learning resources Coursera follow along course Coursera follow along course 2 Real Python - Object Oriented Programming Article - Forgotten History of OOP Description \u00a4 In this session we will be looking at Python and the filesystem and file structures, how and when they can be used within your Python programs. Object Oriented programming in Python - Classes \u00a4 Reflection on inbuilt Python classes \u00a4 If we look back to the first session we did on data types in Python we can recall that there are inbuilt data types such as strings, lists, dictionaries, etc. All of these are examples of classes and they have their own methods and attributes. For example, we can make a string and the split the string on spaces to give a list of strings. demo_string = \"Hello world\" print ( demo_string . split ( \" \" )) # => ['Hello', 'world'] This is an example of a method that the string class has. Note this method is not available for integers, dictionaries, lists etc. Instantiating, Attributes and Methods \u00a4 We can see what attributes and methods a instance has access to by using the built in function dir() if we use dir(\"\") then we get the following: [ '__add__' , '__class__' , '__co nta i ns __' , '__dela ttr __' , '__dir__' , '__doc__' , '__eq__' , '__ f orma t __' , '__ge__' , '__ge tattr ibu te __' , '__ge t i te m__' , '__ge tne wargs__' , '__g t __' , '__hash__' , '__i n i t __' , '__i n i t _subclass__' , '__i ter __' , '__le__' , '__le n __' , '__l t __' , '__mod__' , '__mul__' , '__ ne __' , '__ ne w__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__rmod__' , '__rmul__' , '__se tattr __' , '__sizeo f __' , '__s tr __' , '__subclasshook__' , 'capi tal ize' , 'case f old' , 'ce nter ' , 'cou nt ' , 'e n code' , 'e n dswi t h' , 'expa n d ta bs' , ' f i n d' , ' f orma t ' , ' f orma t _map' , 'i n dex' , 'isal nu m' , 'isalpha' , 'isascii' , 'isdecimal' , 'isdigi t ' , 'iside nt i f ier' , 'islower' , 'is nu meric' , 'ispri nta ble' , 'isspace' , 'is t i tle ' , 'isupper' , 'joi n ' , 'ljus t ' , 'lower' , 'ls tr ip' , 'make trans ' , 'par t i t io n ' , 'replace' , 'r f i n d' , 'ri n dex' , 'rjus t ' , 'rpar t i t io n ' , 'rspli t ' , s'rs tr ip' , 'spli t ' , 'spli tl i nes ' , 's tarts wi t h' , 's tr ip' , 'swapcase' , ' t i tle ' , ' translate ' , 'upper' , 'z f ill' ] This shows all of the normal methods/attributes (indicated by no prefixed underscores) as well as \"private\" methods/attributes (indicated by prefixed underscores) that the class has access to. Their are also special methods called dunder methods (double underscore methods) and these are methods that Python will use in special ways. So for instance the __add__ method seen above will concatenate strings in this instance. The __init__ method will initialise an object so will be the first thing that is ran when making an object of that class. Making our own classes \u00a4 We can make our own classes in Python using the class keyword, note that a class does not need to do anything by itself. We can instantiate a object of a given class by using the class name followed by parenthesis. class Demo : pass d = Demo () This is a relatively useless class though so lets make a more useful class called Square , it will inherit from the Python base class which is called object (essentially meaning it inherits form no other class). We will also instantiate it with x which is the side length of the square. x is now an attribute of Square and can be accessed by using the . and the attribute name We have also added a method area which will return the area of the given square. Notice the keyword self which means that we are accessing information from the current object to use the method. class Square ( object ): def __init__ ( self , x ): self . x = x def area ( self ): return self . x ** 2 s = Square ( 5 ) print ( s . x ) # => 5 print ( s . area ()) # => 25 In Python version 3.7 onwards there is some extra convenience methods for building your classes. These are called dataclass es, we will compare side by side the difference Python < 3.7 class Square ( object ): def __init__ ( self , x , name , color , rounded ): self . x = x self . name = name self . color = color self . rounded = rounded def area ( self ): return self . x ** 2 Python >= 3.7 from dataclasses import dataclass @dataclass class Square ( object ): x : float name : str color : str rounded : bool def area ( self ): return self . x ** 2 Using dunder methods to define our own operator functionality \u00a4 We have already used one dunder method, namely the __init__ method. Lets also use the __add__ and __repr__ dunder methods to define what it means to add two Squares class Square ( object ): def __init__ ( self , x ): self . x = x def area ( self ): return self . x ** 2 def __add__ ( self , other ): return Square ( self . x + other . x ) def __repr__ ( self ): return f \"Square of length { self . x } \" s1 = Square ( 5 ) s2 = Square ( 10 ) s3 = s1 + s2 print ( s3 ) # => Square of length 15 Building a context manager \u00a4 We can make use of two more dunder methods, __enter__ and __exit__ which will make our object able to use the keywords with X as: similar to the with open(filename, mode) as file: class Square ( object ): def __init__ ( self , x ): print ( \"Initializing\" ) self . x = x def __enter__ ( self ): print ( \"Entering\" ) def __exit__ ( self , exc_type , exc_val , exc_tb ): print ( \"Exiting\" ) def area ( self ): return self . x ** 2 def __add__ ( self , other ): return Square ( self . x + other . x ) def __repr__ ( self ): return f \"Square of length { self . x } \" with Square ( 5 ) as s : print ( s ) # => Initializing # => Entering # => Square of length 5 # => Exiting","title":"Object Oriented Programming"},{"location":"intro-to-python/week-2.1/#object-oriented-programming","text":"Key Info Created date 02/02/2021 Previous knowledge None What you will learn Object Oriented Programming OOP Encapsulation Polymorphism None Mentors Learning resources Coursera follow along course Coursera follow along course 2 Real Python - Object Oriented Programming Article - Forgotten History of OOP","title":"Object Oriented Programming"},{"location":"intro-to-python/week-2.1/#description","text":"In this session we will be looking at Python and the filesystem and file structures, how and when they can be used within your Python programs.","title":"Description"},{"location":"intro-to-python/week-2.1/#object-oriented-programming-in-python-classes","text":"","title":"Object Oriented programming in Python - Classes"},{"location":"intro-to-python/week-2.1/#reflection-on-inbuilt-python-classes","text":"If we look back to the first session we did on data types in Python we can recall that there are inbuilt data types such as strings, lists, dictionaries, etc. All of these are examples of classes and they have their own methods and attributes. For example, we can make a string and the split the string on spaces to give a list of strings. demo_string = \"Hello world\" print ( demo_string . split ( \" \" )) # => ['Hello', 'world'] This is an example of a method that the string class has. Note this method is not available for integers, dictionaries, lists etc.","title":"Reflection on inbuilt Python classes"},{"location":"intro-to-python/week-2.1/#instantiating-attributes-and-methods","text":"We can see what attributes and methods a instance has access to by using the built in function dir() if we use dir(\"\") then we get the following: [ '__add__' , '__class__' , '__co nta i ns __' , '__dela ttr __' , '__dir__' , '__doc__' , '__eq__' , '__ f orma t __' , '__ge__' , '__ge tattr ibu te __' , '__ge t i te m__' , '__ge tne wargs__' , '__g t __' , '__hash__' , '__i n i t __' , '__i n i t _subclass__' , '__i ter __' , '__le__' , '__le n __' , '__l t __' , '__mod__' , '__mul__' , '__ ne __' , '__ ne w__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__rmod__' , '__rmul__' , '__se tattr __' , '__sizeo f __' , '__s tr __' , '__subclasshook__' , 'capi tal ize' , 'case f old' , 'ce nter ' , 'cou nt ' , 'e n code' , 'e n dswi t h' , 'expa n d ta bs' , ' f i n d' , ' f orma t ' , ' f orma t _map' , 'i n dex' , 'isal nu m' , 'isalpha' , 'isascii' , 'isdecimal' , 'isdigi t ' , 'iside nt i f ier' , 'islower' , 'is nu meric' , 'ispri nta ble' , 'isspace' , 'is t i tle ' , 'isupper' , 'joi n ' , 'ljus t ' , 'lower' , 'ls tr ip' , 'make trans ' , 'par t i t io n ' , 'replace' , 'r f i n d' , 'ri n dex' , 'rjus t ' , 'rpar t i t io n ' , 'rspli t ' , s'rs tr ip' , 'spli t ' , 'spli tl i nes ' , 's tarts wi t h' , 's tr ip' , 'swapcase' , ' t i tle ' , ' translate ' , 'upper' , 'z f ill' ] This shows all of the normal methods/attributes (indicated by no prefixed underscores) as well as \"private\" methods/attributes (indicated by prefixed underscores) that the class has access to. Their are also special methods called dunder methods (double underscore methods) and these are methods that Python will use in special ways. So for instance the __add__ method seen above will concatenate strings in this instance. The __init__ method will initialise an object so will be the first thing that is ran when making an object of that class.","title":"Instantiating, Attributes and Methods"},{"location":"intro-to-python/week-2.1/#making-our-own-classes","text":"We can make our own classes in Python using the class keyword, note that a class does not need to do anything by itself. We can instantiate a object of a given class by using the class name followed by parenthesis. class Demo : pass d = Demo () This is a relatively useless class though so lets make a more useful class called Square , it will inherit from the Python base class which is called object (essentially meaning it inherits form no other class). We will also instantiate it with x which is the side length of the square. x is now an attribute of Square and can be accessed by using the . and the attribute name We have also added a method area which will return the area of the given square. Notice the keyword self which means that we are accessing information from the current object to use the method. class Square ( object ): def __init__ ( self , x ): self . x = x def area ( self ): return self . x ** 2 s = Square ( 5 ) print ( s . x ) # => 5 print ( s . area ()) # => 25 In Python version 3.7 onwards there is some extra convenience methods for building your classes. These are called dataclass es, we will compare side by side the difference Python < 3.7 class Square ( object ): def __init__ ( self , x , name , color , rounded ): self . x = x self . name = name self . color = color self . rounded = rounded def area ( self ): return self . x ** 2 Python >= 3.7 from dataclasses import dataclass @dataclass class Square ( object ): x : float name : str color : str rounded : bool def area ( self ): return self . x ** 2","title":"Making our own classes"},{"location":"intro-to-python/week-2.1/#using-dunder-methods-to-define-our-own-operator-functionality","text":"We have already used one dunder method, namely the __init__ method. Lets also use the __add__ and __repr__ dunder methods to define what it means to add two Squares class Square ( object ): def __init__ ( self , x ): self . x = x def area ( self ): return self . x ** 2 def __add__ ( self , other ): return Square ( self . x + other . x ) def __repr__ ( self ): return f \"Square of length { self . x } \" s1 = Square ( 5 ) s2 = Square ( 10 ) s3 = s1 + s2 print ( s3 ) # => Square of length 15","title":"Using dunder methods to define our own operator functionality"},{"location":"intro-to-python/week-2.1/#building-a-context-manager","text":"We can make use of two more dunder methods, __enter__ and __exit__ which will make our object able to use the keywords with X as: similar to the with open(filename, mode) as file: class Square ( object ): def __init__ ( self , x ): print ( \"Initializing\" ) self . x = x def __enter__ ( self ): print ( \"Entering\" ) def __exit__ ( self , exc_type , exc_val , exc_tb ): print ( \"Exiting\" ) def area ( self ): return self . x ** 2 def __add__ ( self , other ): return Square ( self . x + other . x ) def __repr__ ( self ): return f \"Square of length { self . x } \" with Square ( 5 ) as s : print ( s ) # => Initializing # => Entering # => Square of length 5 # => Exiting","title":"Building a context manager"},{"location":"intro-to-python/week-2.2/","text":"Input and Output \u00a4 Key Info Created date 02/02/2021 Previous knowledge None What you will learn File IO File Paths Pathlib File Extensions File Formats TXT File Format JSON File Format CSV File Format TSV File Format PNG File Format JPG File Format XLS File Format XLSX File Format XLSM File Format ZIP File Format TAR File Format TAR.GZ File Format Mentors Learning resources Coursera follow along course Real Python - Working with Files Real Python - Pathlib Real Python - JSON Description \u00a4 In this session we will be looking at Python and the filesystem and file structures, how and when they can be used within your Python programs. Facts for the session \u00a4 When most people refer to the file system, they are generally talking about 'the logical file system' which provides an API layer on which programs can perform certain operations, such as opening, reading, writing, etc. There are two other layers, namely the virtual file system and the physical file system. The virtual file system allows for multiple physical file systems and the physical file system is concerned with the physical way to write data to your hard drive. Luckily this is all abstracted away from us and we can just use the logical file system rather than telling a hard drive to move its arm to a certain point! Installing the necessary packages \u00a4 pipenv install pandas Pillow xlrd Working with the file system in Python \u00a4 Searching the file system with os , glob and pathlib \u00a4 We have some data stored in our 'data' folder and our Python scripts are stored in our 'scripts' folder. In scripts/filesystem.py we will go through different ways to search our file system as well as best practices for doing so. The most common technique to search the file system is os.listdir() which lists the entries in directory that you give it import os entries = os . listdir ( \"../data/\" ) for entry in entries : print ( entry ) Another way to search file systems is using a glob pattern which can act like a wildcard, for example to find all .txt files in a directory we can use a glob pattern of *.txt import glob entries = glob . glob ( \"../data/*\" ) for entry in entries : print ( entry ) The way we will be using and is a general best practice since Python 3.5+ is pathlib which is an object oriented approach to working with the file system. It combines a lot of other python library functionalities into one package, eg shutil , os , glob from pathlib import Path entries = Path . cwd () . parent / \"data\" for entry in entries . iterdir (): print ( entry . name ) CRUD operations on the filesystem \u00a4 Create \u00a4 Creating directories \u00a4 We can create a directory (or folder) in Python using the pathlib library from pathlib import Path path = Path . cwd () . parent / \"data\" / \"sub_dir\" path . mkdir ( exist_ok = True , parents = True ) Creating files \u00a4 To create files we use the python inbuilt function open and we need to tell it which mode we want to open it with (read, write or append). This will open up a 'stream', we can then add in whatever data we want to that stream, then when we close it the file will be full of the data and available for other people/programs to see and use. file = open ( \"demo.txt\" , mode = \"w\" ) file . write ( \"Hello world\" ) file . close () It is important to ensure we close the stream so it is the best practice to make use of Pythons 'context manager' approach where possible. It will ensure that the stream is closed after we have finished with it and we do not need to tell it to close. with open ( \"demo.txt\" , mode = \"w\" ) as file : file . write ( \"Hello world\" ) Read \u00a4 We can read the raw data of any file by using the python inbuilt function open , but this time setting the mode to 'read' with open ( \"demo.txt\" , mode = \"r\" ) as file : data = file . read () print ( data ) Update \u00a4 We can update the raw data of any file by using the python inbuilt function open , depending on what kind of updating we want to do we can either open the file in read mode and then in write mode (this will overwrite any existing data and can be done by combining the above approaches) or we can open the file in append mode which will just add data to the end of the file. # Overwriting with open ( \"demo.txt\" , mode = \"r+\" ) as file : data = file . read () data = data + \"Added text\" file . write ( data ) # Appending with open ( \"demo.txt\" , mode = \"a\" ) as file : file . write ( \"Hello world\" ) Delete \u00a4 Deleting directories \u00a4 We can delete a directory using the pathlib library's Path.rmdir() , the folder must be empty though! from pathlib import Path path = Path . cwd () . parent / \"data\" / \"sub_dir\" path . rmdir () Deleting files \u00a4 We can delete a file using the pathlib library's Path.unlink() from pathlib import Path path = Path . cwd () . parent / \"data\" / \"demo.txt\" path . unlink ( missing_ok = True ) File structures \u00a4 Now we are ready to look at file structures, this is just the contents of a file which will be a series of characters or bytes. The key to reading them is to understand the structure of the information. A file extension on its own means nothing, it is the content of the file that determines how to understand it. An extension is just a way to hint how it should be loaded. Unstructured text - .txt \u00a4 .txt files are generally used to symbolize that they have unstructured text inside of them and that programs opening them do not need to do any additional steps other than display the raw file contents. Do not stand at my grave and weep I am not there; I do not sleep. I am a thousand winds that blow, I am the diamond glints on snow, I am the sun on ripened grain, I am the gentle autumn rain. When you awaken in the morning's hush I am the swift uplifting rush Of quiet birds in circled flight. I am the soft stars that shine at night. Do not stand at my grave and cry, I am not there; I did not die. In Python we could open up this file just using the open(\"path.txt\", mode=\"r\") and read it in as a string. from pathlib import Path path = Path . cwd () . parent / \"data\" / \"demo.txt\" with open ( path , mode = \"r\" ) as file : data = file . read () print ( data ) Structured data - .json, .csv, .tsv \u00a4 JSON \u00a4 JSON stands for javascript object notation and is one of the most common file formats on the internet. We can think of this file format as just a Python dictionary as it is more or less the same syntax. { \"IDE\" : \"Insight Driven Enterprise\" , \"I&D\" : \"Insights and Data\" , \"P&O\" : \"People and Organization\" , \"APAC\" : \"Asia Pacific\" } In Python we could open up this file and read it into a Python dictionary using the standard library json import json from pathlib import Path path = Path . cwd () . parent / \"data\" / \"demo.json\" with open ( path , mode = \"r\" ) as file : data = json . load ( file ) print ( data ) CSV and TSV \u00a4 .csv and .tsv stand for comma-separated-value and tab-separated-value, which means the structure of these files will be such that the columns of the data will be separated either by comma's or by tabs Name,Age Bob,22 Harry Jo, 55 Name Age Bob 22 Harry Jo 55 These can either be opened using pandas pd.read_csv() or by parsing the data yourself, in general it will be faster to use pandas so we will show how to do that. from pathlib import Path import pandas as pd path_csv = Path . cwd () . parent / \"data\" / \"demo.csv\" path_tsv = Path . cwd () . parent / \"data\" / \"demo.tsv\" data_csv = pd . read_csv ( path_csv ) data_tsv = pd . read_csv ( path_tsv , sep = ' \\t ' ) print ( data_csv ) print ( data_tsv ) Images - .png, .jpg \u00a4 Images are generally stored as .jpg or .png and these have a very specific way of being written and is beyond the scope of this course to look into how they are encoded and decoded. However, we can learn how to open them in Python! We can make use of the Pillow library (also called PIL), the Python Image Library. Note the main two differences between JPG and PNG are that PNG's can have transparency (or an alpha channel) and that JPG will compress an image to make a smaller file size at the cost of quality. Howvwer PNG will not from pathlib import Path from PIL import Image path_jpg = Path . cwd () . parent / \"data\" / \"demo.jpg\" path_png = Path . cwd () . parent / \"data\" / \"demo.png\" img_jpg = Image . open ( path_jpg ) img_png = Image . open ( path_png ) HTML \u00a4 HTML stands for Hyper Text Markup Language and is used throughout the world inside browsers to display information, HTML has 'tags' which are used to symbolize what that object should be. For instance the tag <p></p> is a paragraph tag. There all sorts of tags that can be used, here is a full list . The main thing to note here is the tree (or parent child) like structure. You have nestings similar to a JSON but with tags instead of nested dictionaries. Also tags can contain attributes themselves whereas that isn't possible to distinguish in JSON files. The main library we use for parsing HTML in Python is BeautifulSoup. However, we also generate HTML using another library called Jinja2. Jinja2 \u00a4 First lets look at generating HTML in Python. We can do this using a template, much like we do in string formatting. However, Jinja is a much more powerful and extensible tool for this purpose. pipenv install Jinja2 from pathlib import Path from jinja2 import FileSystemLoader , Environment , Template path = Path . cwd () . parent / \"data\" / \"templates\" jinja_env = Environment ( loader = FileSystemLoader ( path )) template = jinja_env . get_template ( \"demo.html\" ) formatted_html = template . render ( name = \"Andy Challis\" ) print ( formatted_html ) BeautifulSoup \u00a4 Now we can look at parsing HTML, to do this we will use a library called BeautifulSoup pipenv install bs4 from pathlib import Path from bs4 import BeautifulSoup html_path = Path . cwd () . parent / \"data\" / \"demo.html\" with open ( html_path , mode = \"r\" ) as file : html_file = file . read () soup = BeautifulSoup ( html_file ) title = soup . find ( \"title\" ) print ( title ) print ( title . text ) html = soup . find ( \"html\" ) print ( html ) print ( html [ \"lang\" ]) Excel - .xls, .xlsx, .xslm \u00a4 Excel files and microsoft files in general use proprietary software to create them. However, we can use some Python libraries to manipulate the data if we don't care about making use of the extra functionality from excel such as the formulas. Note that it will process most formulas within the file when reading but when we write an excel file it will not have the formulae. There are ways to get around this but this is beyond the scope of this topic (added for further reading at the bottom) import pandas as pd from pathlib import Path path = Path . cwd () . parent / \"data\" / \"demo.xlsx\" data = pd . read_excel ( path ) print ( data ) Compressed files - .zip, .tar, .tar.gz \u00a4 Compression works by applying a 'compression scheme' to files and folders by examining the contents and creating essentially a lookup table to replace frequently used sections and replacing them with something smaller. When we decompress we just remap those changes back to get the original file. Here is a dummy example to show how compression works from collections import Counter def compress ( s ): words = s . split () freq = Counter ( words ) replacements = { k : str ( i ) for i , ( k , v ) in enumerate ( freq . most_common ())} new_words = [] for word in words : new_words . append ( replacements [ word ]) rev_replacements = { value : key for key , value in replacements . items ()} return \" \" . join ( new_words ), rev_replacements def decompress ( s , replacements ): words = s . split () new_words = [] for word in words : new_words . append ( replacements [ word ]) return \" \" . join ( new_words ) string = \"\"\"Do not stand at my grave and weep I am not there; I do not sleep. I am a thousand winds that blow, I am the diamond glints on snow, I am the sun on ripened grain, I am the gentle autumn rain. When you awaken in the morning's hush I am the swift uplifting rush Of quiet birds in circled flight. I am the soft stars that shine at night. Do not stand at my grave and cry, I am not there; I did not die.\"\"\" compressed , compression_dict = compress ( string ) print ( compressed ) decompressed = decompress ( compressed , compression_dict ) print ( decompressed ) Now obviously this is a very basic compression scheme and not something we would implement in the real world. Instead we will make use of the .zip and .gz compression algorithms. We will also be able to tar a folder which will allow us to compress an entire folder and not just a file. Note that zip will do this all in once solution but gz or gunzip will need tarring first. zip files \u00a4 from zipfile import ZipFile from pathlib import Path folder = Path . cwd () . parent / \"data\" zip_path = folder / \"demo.zip\" # Writing a zip with ZipFile ( zip_path , 'w' ) as file : file . write ( folder / \"demo.txt\" ) file . write ( folder / \"demo.csv\" ) # Reading a zip with ZipFile ( zip_path , 'r' ) as file : data = { name : file . read ( name ) for name in file . namelist ()} print ( data ) tar.gz files \u00a4 import tarfile from pathlib import Path folder = Path . cwd () . parent / \"data\" zip_path = folder / \"demo.tar.gz\" # Writing a tar.gz with tarfile . open ( zip_path , \"w:gz\" ) as tar : tar . add ( folder / \"demo.txt\" ) tar . add ( folder / \"demo.csv\" ) # Reading a tar.gz with tarfile . open ( zip_path , \"r:gz\" ) as tar : data = { file . name : tar . extractfile ( file ) . read () for file in tar . getmembers ()} Extra requested content \u00a4 Looping through hundreds of files and updating them \u00a4 For this example we will create 100 .csv 's with 10 random names, save them all out into a folder to make our example dataset. Then we will update all of the files to add an extra column 'address' and save the file back out. We will use the faker library to create fake data pipenv install pandas Faker Part 1 is to generate the data, lets call this python script datagen.py from pathlib import Path import pandas as pd from faker import Factory faker = Factory . create () # Make the folder if it doesnt exist folder = Path . cwd () . parent / \"data\" / \"csv_demo_data\" folder . mkdir ( exist_ok = True , parents = True ) # Make 100 csv file paths file_paths = [ folder / f \"demo- { i } .csv\" for i in range ( 100 )] # Loop through all file paths and generate and save the data for file_path in file_paths : # Make dummy data nrows = 10 data = pd . DataFrame ({ \"id\" : range ( 1 , nrows + 1 )}) # Add random names data [ \"full name\" ] = data [ \"id\" ] . map ( lambda _ : faker . name ()) # Save data data . to_csv ( file_path , index = False ) Part 2 is to load in the files and update the data, lets call this script update_data.py from pathlib import Path import pandas as pd from faker import Factory faker = Factory . create () # Folder containing the CVS's folder = Path . cwd () . parent / \"data\" / \"csv_demo_data\" # Get the 100 csv file paths file_paths = folder . glob ( \"*.csv\" ) # Loop through all file paths and generate and save the data for file_path in file_paths : # Load the data data = pd . read_csv ( file_path ) # Add random addresses data [ \"address\" ] = data [ \"id\" ] . map ( lambda _ : faker . address () . replace ( \" \\n \" , \" \" )) # Save data data . to_csv ( file_path , index = False )","title":"Input/Output"},{"location":"intro-to-python/week-2.2/#input-and-output","text":"Key Info Created date 02/02/2021 Previous knowledge None What you will learn File IO File Paths Pathlib File Extensions File Formats TXT File Format JSON File Format CSV File Format TSV File Format PNG File Format JPG File Format XLS File Format XLSX File Format XLSM File Format ZIP File Format TAR File Format TAR.GZ File Format Mentors Learning resources Coursera follow along course Real Python - Working with Files Real Python - Pathlib Real Python - JSON","title":"Input and Output"},{"location":"intro-to-python/week-2.2/#description","text":"In this session we will be looking at Python and the filesystem and file structures, how and when they can be used within your Python programs.","title":"Description"},{"location":"intro-to-python/week-2.2/#facts-for-the-session","text":"When most people refer to the file system, they are generally talking about 'the logical file system' which provides an API layer on which programs can perform certain operations, such as opening, reading, writing, etc. There are two other layers, namely the virtual file system and the physical file system. The virtual file system allows for multiple physical file systems and the physical file system is concerned with the physical way to write data to your hard drive. Luckily this is all abstracted away from us and we can just use the logical file system rather than telling a hard drive to move its arm to a certain point!","title":"Facts for the session"},{"location":"intro-to-python/week-2.2/#installing-the-necessary-packages","text":"pipenv install pandas Pillow xlrd","title":"Installing the necessary packages"},{"location":"intro-to-python/week-2.2/#working-with-the-file-system-in-python","text":"","title":"Working with the file system in Python"},{"location":"intro-to-python/week-2.2/#searching-the-file-system-with-os-glob-and-pathlib","text":"We have some data stored in our 'data' folder and our Python scripts are stored in our 'scripts' folder. In scripts/filesystem.py we will go through different ways to search our file system as well as best practices for doing so. The most common technique to search the file system is os.listdir() which lists the entries in directory that you give it import os entries = os . listdir ( \"../data/\" ) for entry in entries : print ( entry ) Another way to search file systems is using a glob pattern which can act like a wildcard, for example to find all .txt files in a directory we can use a glob pattern of *.txt import glob entries = glob . glob ( \"../data/*\" ) for entry in entries : print ( entry ) The way we will be using and is a general best practice since Python 3.5+ is pathlib which is an object oriented approach to working with the file system. It combines a lot of other python library functionalities into one package, eg shutil , os , glob from pathlib import Path entries = Path . cwd () . parent / \"data\" for entry in entries . iterdir (): print ( entry . name )","title":"Searching the file system with os, glob and pathlib"},{"location":"intro-to-python/week-2.2/#crud-operations-on-the-filesystem","text":"","title":"CRUD operations on the filesystem"},{"location":"intro-to-python/week-2.2/#create","text":"","title":"Create"},{"location":"intro-to-python/week-2.2/#creating-directories","text":"We can create a directory (or folder) in Python using the pathlib library from pathlib import Path path = Path . cwd () . parent / \"data\" / \"sub_dir\" path . mkdir ( exist_ok = True , parents = True )","title":"Creating directories"},{"location":"intro-to-python/week-2.2/#creating-files","text":"To create files we use the python inbuilt function open and we need to tell it which mode we want to open it with (read, write or append). This will open up a 'stream', we can then add in whatever data we want to that stream, then when we close it the file will be full of the data and available for other people/programs to see and use. file = open ( \"demo.txt\" , mode = \"w\" ) file . write ( \"Hello world\" ) file . close () It is important to ensure we close the stream so it is the best practice to make use of Pythons 'context manager' approach where possible. It will ensure that the stream is closed after we have finished with it and we do not need to tell it to close. with open ( \"demo.txt\" , mode = \"w\" ) as file : file . write ( \"Hello world\" )","title":"Creating files"},{"location":"intro-to-python/week-2.2/#read","text":"We can read the raw data of any file by using the python inbuilt function open , but this time setting the mode to 'read' with open ( \"demo.txt\" , mode = \"r\" ) as file : data = file . read () print ( data )","title":"Read"},{"location":"intro-to-python/week-2.2/#update","text":"We can update the raw data of any file by using the python inbuilt function open , depending on what kind of updating we want to do we can either open the file in read mode and then in write mode (this will overwrite any existing data and can be done by combining the above approaches) or we can open the file in append mode which will just add data to the end of the file. # Overwriting with open ( \"demo.txt\" , mode = \"r+\" ) as file : data = file . read () data = data + \"Added text\" file . write ( data ) # Appending with open ( \"demo.txt\" , mode = \"a\" ) as file : file . write ( \"Hello world\" )","title":"Update"},{"location":"intro-to-python/week-2.2/#delete","text":"","title":"Delete"},{"location":"intro-to-python/week-2.2/#deleting-directories","text":"We can delete a directory using the pathlib library's Path.rmdir() , the folder must be empty though! from pathlib import Path path = Path . cwd () . parent / \"data\" / \"sub_dir\" path . rmdir ()","title":"Deleting directories"},{"location":"intro-to-python/week-2.2/#deleting-files","text":"We can delete a file using the pathlib library's Path.unlink() from pathlib import Path path = Path . cwd () . parent / \"data\" / \"demo.txt\" path . unlink ( missing_ok = True )","title":"Deleting files"},{"location":"intro-to-python/week-2.2/#file-structures","text":"Now we are ready to look at file structures, this is just the contents of a file which will be a series of characters or bytes. The key to reading them is to understand the structure of the information. A file extension on its own means nothing, it is the content of the file that determines how to understand it. An extension is just a way to hint how it should be loaded.","title":"File structures"},{"location":"intro-to-python/week-2.2/#unstructured-text-txt","text":".txt files are generally used to symbolize that they have unstructured text inside of them and that programs opening them do not need to do any additional steps other than display the raw file contents. Do not stand at my grave and weep I am not there; I do not sleep. I am a thousand winds that blow, I am the diamond glints on snow, I am the sun on ripened grain, I am the gentle autumn rain. When you awaken in the morning's hush I am the swift uplifting rush Of quiet birds in circled flight. I am the soft stars that shine at night. Do not stand at my grave and cry, I am not there; I did not die. In Python we could open up this file just using the open(\"path.txt\", mode=\"r\") and read it in as a string. from pathlib import Path path = Path . cwd () . parent / \"data\" / \"demo.txt\" with open ( path , mode = \"r\" ) as file : data = file . read () print ( data )","title":"Unstructured text - .txt"},{"location":"intro-to-python/week-2.2/#structured-data-json-csv-tsv","text":"","title":"Structured data - .json, .csv, .tsv"},{"location":"intro-to-python/week-2.2/#json","text":"JSON stands for javascript object notation and is one of the most common file formats on the internet. We can think of this file format as just a Python dictionary as it is more or less the same syntax. { \"IDE\" : \"Insight Driven Enterprise\" , \"I&D\" : \"Insights and Data\" , \"P&O\" : \"People and Organization\" , \"APAC\" : \"Asia Pacific\" } In Python we could open up this file and read it into a Python dictionary using the standard library json import json from pathlib import Path path = Path . cwd () . parent / \"data\" / \"demo.json\" with open ( path , mode = \"r\" ) as file : data = json . load ( file ) print ( data )","title":"JSON"},{"location":"intro-to-python/week-2.2/#csv-and-tsv","text":".csv and .tsv stand for comma-separated-value and tab-separated-value, which means the structure of these files will be such that the columns of the data will be separated either by comma's or by tabs Name,Age Bob,22 Harry Jo, 55 Name Age Bob 22 Harry Jo 55 These can either be opened using pandas pd.read_csv() or by parsing the data yourself, in general it will be faster to use pandas so we will show how to do that. from pathlib import Path import pandas as pd path_csv = Path . cwd () . parent / \"data\" / \"demo.csv\" path_tsv = Path . cwd () . parent / \"data\" / \"demo.tsv\" data_csv = pd . read_csv ( path_csv ) data_tsv = pd . read_csv ( path_tsv , sep = ' \\t ' ) print ( data_csv ) print ( data_tsv )","title":"CSV and TSV"},{"location":"intro-to-python/week-2.2/#images-png-jpg","text":"Images are generally stored as .jpg or .png and these have a very specific way of being written and is beyond the scope of this course to look into how they are encoded and decoded. However, we can learn how to open them in Python! We can make use of the Pillow library (also called PIL), the Python Image Library. Note the main two differences between JPG and PNG are that PNG's can have transparency (or an alpha channel) and that JPG will compress an image to make a smaller file size at the cost of quality. Howvwer PNG will not from pathlib import Path from PIL import Image path_jpg = Path . cwd () . parent / \"data\" / \"demo.jpg\" path_png = Path . cwd () . parent / \"data\" / \"demo.png\" img_jpg = Image . open ( path_jpg ) img_png = Image . open ( path_png )","title":"Images - .png, .jpg"},{"location":"intro-to-python/week-2.2/#html","text":"HTML stands for Hyper Text Markup Language and is used throughout the world inside browsers to display information, HTML has 'tags' which are used to symbolize what that object should be. For instance the tag <p></p> is a paragraph tag. There all sorts of tags that can be used, here is a full list . The main thing to note here is the tree (or parent child) like structure. You have nestings similar to a JSON but with tags instead of nested dictionaries. Also tags can contain attributes themselves whereas that isn't possible to distinguish in JSON files. The main library we use for parsing HTML in Python is BeautifulSoup. However, we also generate HTML using another library called Jinja2.","title":"HTML"},{"location":"intro-to-python/week-2.2/#jinja2","text":"First lets look at generating HTML in Python. We can do this using a template, much like we do in string formatting. However, Jinja is a much more powerful and extensible tool for this purpose. pipenv install Jinja2 from pathlib import Path from jinja2 import FileSystemLoader , Environment , Template path = Path . cwd () . parent / \"data\" / \"templates\" jinja_env = Environment ( loader = FileSystemLoader ( path )) template = jinja_env . get_template ( \"demo.html\" ) formatted_html = template . render ( name = \"Andy Challis\" ) print ( formatted_html )","title":"Jinja2"},{"location":"intro-to-python/week-2.2/#beautifulsoup","text":"Now we can look at parsing HTML, to do this we will use a library called BeautifulSoup pipenv install bs4 from pathlib import Path from bs4 import BeautifulSoup html_path = Path . cwd () . parent / \"data\" / \"demo.html\" with open ( html_path , mode = \"r\" ) as file : html_file = file . read () soup = BeautifulSoup ( html_file ) title = soup . find ( \"title\" ) print ( title ) print ( title . text ) html = soup . find ( \"html\" ) print ( html ) print ( html [ \"lang\" ])","title":"BeautifulSoup"},{"location":"intro-to-python/week-2.2/#excel-xls-xlsx-xslm","text":"Excel files and microsoft files in general use proprietary software to create them. However, we can use some Python libraries to manipulate the data if we don't care about making use of the extra functionality from excel such as the formulas. Note that it will process most formulas within the file when reading but when we write an excel file it will not have the formulae. There are ways to get around this but this is beyond the scope of this topic (added for further reading at the bottom) import pandas as pd from pathlib import Path path = Path . cwd () . parent / \"data\" / \"demo.xlsx\" data = pd . read_excel ( path ) print ( data )","title":"Excel - .xls, .xlsx, .xslm"},{"location":"intro-to-python/week-2.2/#compressed-files-zip-tar-targz","text":"Compression works by applying a 'compression scheme' to files and folders by examining the contents and creating essentially a lookup table to replace frequently used sections and replacing them with something smaller. When we decompress we just remap those changes back to get the original file. Here is a dummy example to show how compression works from collections import Counter def compress ( s ): words = s . split () freq = Counter ( words ) replacements = { k : str ( i ) for i , ( k , v ) in enumerate ( freq . most_common ())} new_words = [] for word in words : new_words . append ( replacements [ word ]) rev_replacements = { value : key for key , value in replacements . items ()} return \" \" . join ( new_words ), rev_replacements def decompress ( s , replacements ): words = s . split () new_words = [] for word in words : new_words . append ( replacements [ word ]) return \" \" . join ( new_words ) string = \"\"\"Do not stand at my grave and weep I am not there; I do not sleep. I am a thousand winds that blow, I am the diamond glints on snow, I am the sun on ripened grain, I am the gentle autumn rain. When you awaken in the morning's hush I am the swift uplifting rush Of quiet birds in circled flight. I am the soft stars that shine at night. Do not stand at my grave and cry, I am not there; I did not die.\"\"\" compressed , compression_dict = compress ( string ) print ( compressed ) decompressed = decompress ( compressed , compression_dict ) print ( decompressed ) Now obviously this is a very basic compression scheme and not something we would implement in the real world. Instead we will make use of the .zip and .gz compression algorithms. We will also be able to tar a folder which will allow us to compress an entire folder and not just a file. Note that zip will do this all in once solution but gz or gunzip will need tarring first.","title":"Compressed files - .zip, .tar, .tar.gz"},{"location":"intro-to-python/week-2.2/#zip-files","text":"from zipfile import ZipFile from pathlib import Path folder = Path . cwd () . parent / \"data\" zip_path = folder / \"demo.zip\" # Writing a zip with ZipFile ( zip_path , 'w' ) as file : file . write ( folder / \"demo.txt\" ) file . write ( folder / \"demo.csv\" ) # Reading a zip with ZipFile ( zip_path , 'r' ) as file : data = { name : file . read ( name ) for name in file . namelist ()} print ( data )","title":"zip files"},{"location":"intro-to-python/week-2.2/#targz-files","text":"import tarfile from pathlib import Path folder = Path . cwd () . parent / \"data\" zip_path = folder / \"demo.tar.gz\" # Writing a tar.gz with tarfile . open ( zip_path , \"w:gz\" ) as tar : tar . add ( folder / \"demo.txt\" ) tar . add ( folder / \"demo.csv\" ) # Reading a tar.gz with tarfile . open ( zip_path , \"r:gz\" ) as tar : data = { file . name : tar . extractfile ( file ) . read () for file in tar . getmembers ()}","title":"tar.gz files"},{"location":"intro-to-python/week-2.2/#extra-requested-content","text":"","title":"Extra requested content"},{"location":"intro-to-python/week-2.2/#looping-through-hundreds-of-files-and-updating-them","text":"For this example we will create 100 .csv 's with 10 random names, save them all out into a folder to make our example dataset. Then we will update all of the files to add an extra column 'address' and save the file back out. We will use the faker library to create fake data pipenv install pandas Faker Part 1 is to generate the data, lets call this python script datagen.py from pathlib import Path import pandas as pd from faker import Factory faker = Factory . create () # Make the folder if it doesnt exist folder = Path . cwd () . parent / \"data\" / \"csv_demo_data\" folder . mkdir ( exist_ok = True , parents = True ) # Make 100 csv file paths file_paths = [ folder / f \"demo- { i } .csv\" for i in range ( 100 )] # Loop through all file paths and generate and save the data for file_path in file_paths : # Make dummy data nrows = 10 data = pd . DataFrame ({ \"id\" : range ( 1 , nrows + 1 )}) # Add random names data [ \"full name\" ] = data [ \"id\" ] . map ( lambda _ : faker . name ()) # Save data data . to_csv ( file_path , index = False ) Part 2 is to load in the files and update the data, lets call this script update_data.py from pathlib import Path import pandas as pd from faker import Factory faker = Factory . create () # Folder containing the CVS's folder = Path . cwd () . parent / \"data\" / \"csv_demo_data\" # Get the 100 csv file paths file_paths = folder . glob ( \"*.csv\" ) # Loop through all file paths and generate and save the data for file_path in file_paths : # Load the data data = pd . read_csv ( file_path ) # Add random addresses data [ \"address\" ] = data [ \"id\" ] . map ( lambda _ : faker . address () . replace ( \" \\n \" , \" \" )) # Save data data . to_csv ( file_path , index = False )","title":"Looping through hundreds of files and updating them"},{"location":"intro-to-python/week-3.0/","text":"Workflow - Unit Testing \u00a4 Key Info Created date 08/03/2021 Previous knowledge None What you will learn Unit Tests TDD Code coverage Mentors Learning resources Coursera follow along course Pytest documentation Pytest-cov documentation Description \u00a4 This session will focus on how to utilise Pytest to write effective unit tests and we'll look at how to generate a code coverage report to ensure all your code has been tested What is test driven development? \u00a4 Test driven development is a software development methodology that requires a developer to convert requirements into unit tests before the code has actually been completed and iteratively test written code against these unit tests to ensure it meets expectations. This approach to software development ensures a developer is building code that actively addresses requirements from the client or product owner and gives everyone involved in the development life cycle confidence in what is being built. Test driven development is in contrast to writing unit tests at the end of the development life cycle where original requirements/scenarios may accidentally fall through the cracks and be forgotten, which can result in more bugs appearing in the code and the product not performing to expectations. What are Unit Tests? \u00a4 When you write a piece of code, you consider all the ways the code might fail (incorrect data, format of the incoming data is wrong, people submitting silly values etc.) and you build your code to handle them. Unit tests are a way to guarantee your code works in the way you expect and handles these edge cases/possible exceptions gracefully by passing in different parameters to each function and checking the output is what is expected. Why Unit Tests? \u00a4 Unit tests are implemented to give you confidence that when your code is pushed to production or other people are using your code, it's functioning correctly. It also allows other people to verify that you're code is functioning as expected without an in-depth understanding of the code itself. As your program develops, unit tests allow you to keep track of any changes in upstream or systems that may be sending different information and ensure that any changes maintain the integrity and functioning of the program. As such, unit tests are important for pull requests and code reviews when you've modified code and want to merge it back into the main development branch. It shows the person undertaking the code review that what you've written doesn't break the existing code/unit tests, and you can show that you've written new unit tests to cover the functions you've developed or changes you've made. Another benefit to unit testing your code is that when someone else picks up your code, they can determine what each function should be expecting and what it should return. This helps other developers understand your code and allows them to improve and build upon what you've designed and developed which is a core component of open source development. Installing, importing and using Pytest \u00a4 Now we know what unit tests are and why we use them, how do we actually design them for a Python program? The most common library used for python unit tests is called Pytest. This can be installed using pip in your terminal: # When python3 is the only version installed pip install pytest # When multiple versions of python are installed pip3 install pytest Pytest can then be imported into a python file by simply calling: import pytest Pytest can then be called using the command line where it will iterate through all files within the current directory and sub-directories to find files that start with \"test_\" and then any functions within those files that begin with \"test_\" i.e test_process.py for a file or test_check_status for a function. pytest Writing Pytest unit tests \u00a4 Simple pytest unit tests are functions that call specific portions of your code, pass in defined variables and then check the output, verifying it's what should be expected. Lets define a simple function that we want to test that has an input and an output. # Define a simple function def check_status ( status ): if status == \"Red\" : check = True else : check = False return check And now we want to define a unit test that will check that it's functioning correctly. # If the function as in another file, we'd need to import it first from file import check_status def test_check_status (): status = \"Red\" result = check_status ( status ) assert result == True If we look at the above function, we're defining a variable (status = \"Red\"), calling the function we want to test (result = check_status(status)) and then we're using a new concept \"assert\" to check the output of the function. Assert is an inbuilt python keyword that tests whether a statement is True and if not, returns an AssertionError. If we're running Pytest and the statement we're asserting isn't True, it will fail the test. In our case however, this particular unit test will always return true unless the check_status function is changed. The assert statement can be used to check any statement. Some examples of statements that will pass are: assert 10 / 5 == 2 # Check whether a math function is returning the correct value word = \"Syd\" assert word in \"Sydney\" # Check whether a string contains a substring Some examples of statements that will fail are: # Check whether a particular value is an integer value = 10.5 assert isinstance ( value , int ) score = \"Blue\" assert \"Red\" == \"Blue\" Passing in multiple variables to a unit test \u00a4 The above example was just passing in a single variable to our function, but what if we want to pass in multiple variables or run multiple tests on the same function but tweak each variable? We can use ' Pytest parametrization ' to test our original function. import pytest @pytest . mark . parametrize ( \"status, expected\" , [( \"Red\" , True ), ( \"Blue\" , False ), ( \"Green\" , False ), ( \"red\" , False )]) def test_check_status_multiple_variables ( status , expected ): result = check_status ( status ) assert result == expected In this example we're using the parametrize decorator to define our 2 variables that we want to pass into our unit test, status and expected. We're then setting 4 different values for status and what is the expected value coming back from our function that is being tested. Because we've used the parametrize decorator, this lets Pytest know that we want to run the unit test with each of those sets of variables to validate our function. Checking for exceptions \u00a4 We don't only want to check whether a particular function will operate perfectly, but often we want to check that our code handles errors and bad variables in the right way by raising the correct exceptions. If we change our original function to raise an exception when the incorrect value is provided: def check_status ( status ): assert status == \"Red\" : check = True else : raise ValueError # ValueError is a built-in python exception raised when the type is correct but the value itself isn't. return check Then we can do that our function will raise the right exception through pytest by using pytest.raises. @pytest . mark . parametrize ( \"status, expected\" , [( \"Red\" , True ), ( \"Blue\" , False ), ( \"Green\" , False ), ( \"red\" , False )]) def test_check_status_exception ( status , expected ): if expected == True : result = check_status ( status ) assert result == expected else : with pytest . raises ( ValueError ): result = check_status ( status ) In this function, we're still passing in all our variables and whether we expect them to fail or not, but we're not only checking a True or False statement but we're also checking that a particular exception is being raised when it should be (ValueError). To summarise, if unit tests are written correctly then we can check our functions and verify if they're working and we have a number of tools within Pytest at our disposal to successfully achieve this and more detailed information and examples can be found in the pytest documentation linked at the top of the page. The next step is to generate coverage reports to ensure we have written tests for all of our code. Code coverage reports \u00a4 Pytest-cov is a nice library that can be used for generating coverage reports, integrates with pytest and can be installed using pip. pip3 install pytest-cov You can then call: pytest --cov = myproject (where myproject is the name of the directory that you want to run the coverage report and pytest on) and it will go through and generate a coverage report in the terminal and summarise what % code is being tested by all our unit tests. If we want to save this out to an html file that can be referenced later or uploaded somewhere, we can pass in: pytest --cov = myproject --cov-report html We have included a bash script in each of our capstone repos which you can run to generate a code coverage report. This script will also check the type annotation coverage and docstring coverage which we'll cover in the next section.","title":"Workflow - Unit Testing"},{"location":"intro-to-python/week-3.0/#workflow-unit-testing","text":"Key Info Created date 08/03/2021 Previous knowledge None What you will learn Unit Tests TDD Code coverage Mentors Learning resources Coursera follow along course Pytest documentation Pytest-cov documentation","title":"Workflow - Unit Testing"},{"location":"intro-to-python/week-3.0/#description","text":"This session will focus on how to utilise Pytest to write effective unit tests and we'll look at how to generate a code coverage report to ensure all your code has been tested","title":"Description"},{"location":"intro-to-python/week-3.0/#what-is-test-driven-development","text":"Test driven development is a software development methodology that requires a developer to convert requirements into unit tests before the code has actually been completed and iteratively test written code against these unit tests to ensure it meets expectations. This approach to software development ensures a developer is building code that actively addresses requirements from the client or product owner and gives everyone involved in the development life cycle confidence in what is being built. Test driven development is in contrast to writing unit tests at the end of the development life cycle where original requirements/scenarios may accidentally fall through the cracks and be forgotten, which can result in more bugs appearing in the code and the product not performing to expectations.","title":"What is test driven development?"},{"location":"intro-to-python/week-3.0/#what-are-unit-tests","text":"When you write a piece of code, you consider all the ways the code might fail (incorrect data, format of the incoming data is wrong, people submitting silly values etc.) and you build your code to handle them. Unit tests are a way to guarantee your code works in the way you expect and handles these edge cases/possible exceptions gracefully by passing in different parameters to each function and checking the output is what is expected.","title":"What are Unit Tests?"},{"location":"intro-to-python/week-3.0/#why-unit-tests","text":"Unit tests are implemented to give you confidence that when your code is pushed to production or other people are using your code, it's functioning correctly. It also allows other people to verify that you're code is functioning as expected without an in-depth understanding of the code itself. As your program develops, unit tests allow you to keep track of any changes in upstream or systems that may be sending different information and ensure that any changes maintain the integrity and functioning of the program. As such, unit tests are important for pull requests and code reviews when you've modified code and want to merge it back into the main development branch. It shows the person undertaking the code review that what you've written doesn't break the existing code/unit tests, and you can show that you've written new unit tests to cover the functions you've developed or changes you've made. Another benefit to unit testing your code is that when someone else picks up your code, they can determine what each function should be expecting and what it should return. This helps other developers understand your code and allows them to improve and build upon what you've designed and developed which is a core component of open source development.","title":"Why Unit Tests?"},{"location":"intro-to-python/week-3.0/#installing-importing-and-using-pytest","text":"Now we know what unit tests are and why we use them, how do we actually design them for a Python program? The most common library used for python unit tests is called Pytest. This can be installed using pip in your terminal: # When python3 is the only version installed pip install pytest # When multiple versions of python are installed pip3 install pytest Pytest can then be imported into a python file by simply calling: import pytest Pytest can then be called using the command line where it will iterate through all files within the current directory and sub-directories to find files that start with \"test_\" and then any functions within those files that begin with \"test_\" i.e test_process.py for a file or test_check_status for a function. pytest","title":"Installing, importing and using Pytest"},{"location":"intro-to-python/week-3.0/#writing-pytest-unit-tests","text":"Simple pytest unit tests are functions that call specific portions of your code, pass in defined variables and then check the output, verifying it's what should be expected. Lets define a simple function that we want to test that has an input and an output. # Define a simple function def check_status ( status ): if status == \"Red\" : check = True else : check = False return check And now we want to define a unit test that will check that it's functioning correctly. # If the function as in another file, we'd need to import it first from file import check_status def test_check_status (): status = \"Red\" result = check_status ( status ) assert result == True If we look at the above function, we're defining a variable (status = \"Red\"), calling the function we want to test (result = check_status(status)) and then we're using a new concept \"assert\" to check the output of the function. Assert is an inbuilt python keyword that tests whether a statement is True and if not, returns an AssertionError. If we're running Pytest and the statement we're asserting isn't True, it will fail the test. In our case however, this particular unit test will always return true unless the check_status function is changed. The assert statement can be used to check any statement. Some examples of statements that will pass are: assert 10 / 5 == 2 # Check whether a math function is returning the correct value word = \"Syd\" assert word in \"Sydney\" # Check whether a string contains a substring Some examples of statements that will fail are: # Check whether a particular value is an integer value = 10.5 assert isinstance ( value , int ) score = \"Blue\" assert \"Red\" == \"Blue\"","title":"Writing Pytest unit tests"},{"location":"intro-to-python/week-3.0/#passing-in-multiple-variables-to-a-unit-test","text":"The above example was just passing in a single variable to our function, but what if we want to pass in multiple variables or run multiple tests on the same function but tweak each variable? We can use ' Pytest parametrization ' to test our original function. import pytest @pytest . mark . parametrize ( \"status, expected\" , [( \"Red\" , True ), ( \"Blue\" , False ), ( \"Green\" , False ), ( \"red\" , False )]) def test_check_status_multiple_variables ( status , expected ): result = check_status ( status ) assert result == expected In this example we're using the parametrize decorator to define our 2 variables that we want to pass into our unit test, status and expected. We're then setting 4 different values for status and what is the expected value coming back from our function that is being tested. Because we've used the parametrize decorator, this lets Pytest know that we want to run the unit test with each of those sets of variables to validate our function.","title":"Passing in multiple variables to a unit test"},{"location":"intro-to-python/week-3.0/#checking-for-exceptions","text":"We don't only want to check whether a particular function will operate perfectly, but often we want to check that our code handles errors and bad variables in the right way by raising the correct exceptions. If we change our original function to raise an exception when the incorrect value is provided: def check_status ( status ): assert status == \"Red\" : check = True else : raise ValueError # ValueError is a built-in python exception raised when the type is correct but the value itself isn't. return check Then we can do that our function will raise the right exception through pytest by using pytest.raises. @pytest . mark . parametrize ( \"status, expected\" , [( \"Red\" , True ), ( \"Blue\" , False ), ( \"Green\" , False ), ( \"red\" , False )]) def test_check_status_exception ( status , expected ): if expected == True : result = check_status ( status ) assert result == expected else : with pytest . raises ( ValueError ): result = check_status ( status ) In this function, we're still passing in all our variables and whether we expect them to fail or not, but we're not only checking a True or False statement but we're also checking that a particular exception is being raised when it should be (ValueError). To summarise, if unit tests are written correctly then we can check our functions and verify if they're working and we have a number of tools within Pytest at our disposal to successfully achieve this and more detailed information and examples can be found in the pytest documentation linked at the top of the page. The next step is to generate coverage reports to ensure we have written tests for all of our code.","title":"Checking for exceptions"},{"location":"intro-to-python/week-3.0/#code-coverage-reports","text":"Pytest-cov is a nice library that can be used for generating coverage reports, integrates with pytest and can be installed using pip. pip3 install pytest-cov You can then call: pytest --cov = myproject (where myproject is the name of the directory that you want to run the coverage report and pytest on) and it will go through and generate a coverage report in the terminal and summarise what % code is being tested by all our unit tests. If we want to save this out to an html file that can be referenced later or uploaded somewhere, we can pass in: pytest --cov = myproject --cov-report html We have included a bash script in each of our capstone repos which you can run to generate a code coverage report. This script will also check the type annotation coverage and docstring coverage which we'll cover in the next section.","title":"Code coverage reports"},{"location":"intro-to-python/week-3.1/","text":"Workflow - Formatting \u00a4 Key Info Created date 08/02/2021 Previous knowledge None What you will learn Formatting Linting MyPy Mentors Learning resources Index of Python Enhancement Proposals (PEPs) PEP8 - Style Guide for Python Code Flake8 Documentation Black Github Repo Description \u00a4 Formatting is critical to the readability of code repositories and we'll cover off what formatting means for Python code and how to apply it to your coding Why do we want to write readable code? \u00a4 Writing code that works is important to meet specifications and is often the main focus when delivering a project. However, one the most important and often overlooked aspects of writing good code is writing good readable code. Focusing on the readability of code has the following benefits: Easier to understand and follow for other developers Better explainability when someone wants to know what a particular function does Simpler to maintain and improve existing code when people know what's happening All of the above results in code that will have fewer bugs, better uptake and improved growth potential whether it's a personal project that you're open sourcing or a piece of work you're handing over to a client to implement within their own systems. If someone else can't understand your code then why would they want to use it? How should I format my code? \u00a4 Formatting and you, how to improve your code's readability Python has a subset of Python Enhancement Proposals (PEPs) dedicated to formatting guidelines to promote a standardised approach to python coding and formatting within the python community. We've previously touched on one of the more widely quoted formatting PEPs, PEP 20 -- The Zen of Python , which provides some broad tenets to apply when writing python code. import this \"\"\" Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \"\"\" Other PEPs commonly referenced when determining how to format code include: ' PEP 8 -- Style Guide for Python Code ' ' PEP 216 -- Docstring Format ' ' PEP 3101 -- Advanced String Formatting ' Reading through all these formatting standards and ensuring you apply them consistently throughout your can be an absolute nightmare and takes many years of experience to get completely right. Luckily we have some methods to avoid all this manual work and automatically format our code. Applying a formatter \u00a4 Some of the more popular code formatters for python include: Black isort autopep8 YAPF which are all viable and a lot comes down to personal preference or professional coding standards. At Capgemini Invent we use isort to order package imports followed by Black as our primary formatter with a line length of 120 (--line-length=120 is the argument to apply this when running Black). To apply these functions you need to ensure they're installed: Isort pip3 install isort Black pip3 install black and then run the following to apply the formatting: Isort isort -rc myproject_dir Black black src --line-length = 120 If you are using an IDE (VSCode is the IDE of choice for Capgemini Invent) then you can generally set the IDE to format on save in the settings. This will format your file whenever you save (which should be all the time!). Linting, what is it? \u00a4 When focusing on writing readable code, one other aspect to consider alongside formatting is linting, which is the act of using a linter program to automatically identify syntactical and stylistic problems within your code. Using a linter helps you identify errors in your code and calls out unconventional coding practices which might lead to errors. Linters \u00a4 Python has a number of linters that you can use to help lint your code. In VSCode by default, the available linters include: Pylint (the default for VSCode) Flake8 (Capgemini Invent's recommended linter) MyPy (Used by Capgemini Invent for type annotation checking) Pydocstyle Pydocstyle (pep8) prospector pylama bandit Applying a linter \u00a4 If you want to install and run a linter across your code to call out any potential errors, then you can do the following: # installing flake8 in your python dev environment pip3 install flake8 # apply flake8 to your project directory flake8 myproject_dir Running a linter in the manner above will print out any errors it has identified in the terminal for you to investigate. Linters can also be installed as separate extensions within your IDE of choice rather than installed through python. When you have chosen what linter you want to use for development, it will automaticaly identify potential errors in your code through visial indicators (red lines under your code) and hovering above these should give you a more detailed description of what it has called out. Because they are simply a program looking through your code and comparing it against installed libraries, dependencies and a range of other factors, they can be prone to identifying false positives, especially if you're working on remote development in containers where they're unable to access what libraries you have installed. However, linters are still are an incredibly important and valuable tool to support writing understandable and explainable code. To help you when working on your capstone project, we've included a simple script coverage.sh that will go through and run autoflake, flake8, isort and black to format the code and use pytest, mypy and interrogate to generate code, type annotations and docstring coverage. You can look further into that file for more information around specific arguments. Adding TODO comments \u00a4 We've touched on how adding comments to your code can help other developers understand what a specific line of code does. Another use of comments is to identify areas for future development that you might not have time for right now, don't want to forget about and want to easiy find later on. The most common method of doing this is by adding a TODO comment. # TODO: Look into why this is taking so long This allows a developer to search through the code for TODO to quickly locate areas that have previously been identified for improvement. Which can be especially handy if you're handing off the code to someone else who isn't as comfortable with the code as you are.","title":"Workflow - Formatting"},{"location":"intro-to-python/week-3.1/#workflow-formatting","text":"Key Info Created date 08/02/2021 Previous knowledge None What you will learn Formatting Linting MyPy Mentors Learning resources Index of Python Enhancement Proposals (PEPs) PEP8 - Style Guide for Python Code Flake8 Documentation Black Github Repo","title":"Workflow - Formatting"},{"location":"intro-to-python/week-3.1/#description","text":"Formatting is critical to the readability of code repositories and we'll cover off what formatting means for Python code and how to apply it to your coding","title":"Description"},{"location":"intro-to-python/week-3.1/#why-do-we-want-to-write-readable-code","text":"Writing code that works is important to meet specifications and is often the main focus when delivering a project. However, one the most important and often overlooked aspects of writing good code is writing good readable code. Focusing on the readability of code has the following benefits: Easier to understand and follow for other developers Better explainability when someone wants to know what a particular function does Simpler to maintain and improve existing code when people know what's happening All of the above results in code that will have fewer bugs, better uptake and improved growth potential whether it's a personal project that you're open sourcing or a piece of work you're handing over to a client to implement within their own systems. If someone else can't understand your code then why would they want to use it?","title":"Why do we want to write readable code?"},{"location":"intro-to-python/week-3.1/#how-should-i-format-my-code","text":"Formatting and you, how to improve your code's readability Python has a subset of Python Enhancement Proposals (PEPs) dedicated to formatting guidelines to promote a standardised approach to python coding and formatting within the python community. We've previously touched on one of the more widely quoted formatting PEPs, PEP 20 -- The Zen of Python , which provides some broad tenets to apply when writing python code. import this \"\"\" Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \"\"\" Other PEPs commonly referenced when determining how to format code include: ' PEP 8 -- Style Guide for Python Code ' ' PEP 216 -- Docstring Format ' ' PEP 3101 -- Advanced String Formatting ' Reading through all these formatting standards and ensuring you apply them consistently throughout your can be an absolute nightmare and takes many years of experience to get completely right. Luckily we have some methods to avoid all this manual work and automatically format our code.","title":"How should I format my code?"},{"location":"intro-to-python/week-3.1/#applying-a-formatter","text":"Some of the more popular code formatters for python include: Black isort autopep8 YAPF which are all viable and a lot comes down to personal preference or professional coding standards. At Capgemini Invent we use isort to order package imports followed by Black as our primary formatter with a line length of 120 (--line-length=120 is the argument to apply this when running Black). To apply these functions you need to ensure they're installed: Isort pip3 install isort Black pip3 install black and then run the following to apply the formatting: Isort isort -rc myproject_dir Black black src --line-length = 120 If you are using an IDE (VSCode is the IDE of choice for Capgemini Invent) then you can generally set the IDE to format on save in the settings. This will format your file whenever you save (which should be all the time!).","title":"Applying a formatter"},{"location":"intro-to-python/week-3.1/#linting-what-is-it","text":"When focusing on writing readable code, one other aspect to consider alongside formatting is linting, which is the act of using a linter program to automatically identify syntactical and stylistic problems within your code. Using a linter helps you identify errors in your code and calls out unconventional coding practices which might lead to errors.","title":"Linting, what is it?"},{"location":"intro-to-python/week-3.1/#linters","text":"Python has a number of linters that you can use to help lint your code. In VSCode by default, the available linters include: Pylint (the default for VSCode) Flake8 (Capgemini Invent's recommended linter) MyPy (Used by Capgemini Invent for type annotation checking) Pydocstyle Pydocstyle (pep8) prospector pylama bandit","title":"Linters"},{"location":"intro-to-python/week-3.1/#applying-a-linter","text":"If you want to install and run a linter across your code to call out any potential errors, then you can do the following: # installing flake8 in your python dev environment pip3 install flake8 # apply flake8 to your project directory flake8 myproject_dir Running a linter in the manner above will print out any errors it has identified in the terminal for you to investigate. Linters can also be installed as separate extensions within your IDE of choice rather than installed through python. When you have chosen what linter you want to use for development, it will automaticaly identify potential errors in your code through visial indicators (red lines under your code) and hovering above these should give you a more detailed description of what it has called out. Because they are simply a program looking through your code and comparing it against installed libraries, dependencies and a range of other factors, they can be prone to identifying false positives, especially if you're working on remote development in containers where they're unable to access what libraries you have installed. However, linters are still are an incredibly important and valuable tool to support writing understandable and explainable code. To help you when working on your capstone project, we've included a simple script coverage.sh that will go through and run autoflake, flake8, isort and black to format the code and use pytest, mypy and interrogate to generate code, type annotations and docstring coverage. You can look further into that file for more information around specific arguments.","title":"Applying a linter"},{"location":"intro-to-python/week-3.1/#adding-todo-comments","text":"We've touched on how adding comments to your code can help other developers understand what a specific line of code does. Another use of comments is to identify areas for future development that you might not have time for right now, don't want to forget about and want to easiy find later on. The most common method of doing this is by adding a TODO comment. # TODO: Look into why this is taking so long This allows a developer to search through the code for TODO to quickly locate areas that have previously been identified for improvement. Which can be especially handy if you're handing off the code to someone else who isn't as comfortable with the code as you are.","title":"Adding TODO comments"},{"location":"intro-to-python/week-3.2/","text":"Workflow - Type Hints \u00a4 Key Info Created date 08/02/2021 Previous knowledge None What you will learn Type hints Mentors Learning resource Python Type Hint Documentation Description \u00a4 We've gone through formatting your code and applying linting to detect errors throughout your code, in this section we'll cover off type hinting and how it can be useful to futher improve the readability of your code. What is type hinting? \u00a4 Type hinting was introduced as part of Python 3.5 whereby declared variables in a function can have their data type defined. This doesn't change how the function operates because Python won't check whether the varible sent to the function is the appropriate type based on the type hint at runtime. However, type hints are valuable for type checkers, linters, IDEs etc. to help you code faster and identify errors before they occur. Input type hinting \u00a4 If we look at a basic function: def type_hunt ( var , var_i ): total_var = var [ 0 ] + str ( var_i ) return total_var we have defined a function that has two input variables var and var_i and both of them are required (they don't have a default value). However, we have no idea what format/type the function is expecting var and var_i to be as var_i. If we write the same function with type hinting, we'd get the following: from typing import List def type_hunt_ ( var : List [ str ], var_i : int = 2 ): total_var = var [ 0 ] + str ( var_i ) return total_var By defining that var is expected to be a list of strings, and var_i is expected to be an integer, the function itself becomes a lot easier to understand for someone reading through your code. We have also set var_i to default to 2 when no argument is provided so we're clear that it's optional and neither python or the IDE will raise an error that not enough arguments are provided when the function is called without var_i. Type hinting in this way also allows an IDE or type hinter to visually alert you when you try to to pass in a variable of the incorrect type (usually denoted by a red underline within your code). Output type hinting \u00a4 The other aspect of type hinting is defining what is being returned. def type_hunt_ ( var : List [ str ], var_i : int ) -> str : total_var = var [ 0 ] + str ( var_i ) return total_var In this function we have defined that we're expecting total_var to be returned as a string so any functions that take in total_var as in input can then be coded and appropriately. Some other examples of different types commonly seen in functions and declared using type hinting: def examples_typing ( is_it : bool = True , coords : tuple , multiple : float , options : list , option_info : dict ) -> float : pass","title":"Workflow - Type Hints"},{"location":"intro-to-python/week-3.2/#workflow-type-hints","text":"Key Info Created date 08/02/2021 Previous knowledge None What you will learn Type hints Mentors Learning resource Python Type Hint Documentation","title":"Workflow - Type Hints"},{"location":"intro-to-python/week-3.2/#description","text":"We've gone through formatting your code and applying linting to detect errors throughout your code, in this section we'll cover off type hinting and how it can be useful to futher improve the readability of your code.","title":"Description"},{"location":"intro-to-python/week-3.2/#what-is-type-hinting","text":"Type hinting was introduced as part of Python 3.5 whereby declared variables in a function can have their data type defined. This doesn't change how the function operates because Python won't check whether the varible sent to the function is the appropriate type based on the type hint at runtime. However, type hints are valuable for type checkers, linters, IDEs etc. to help you code faster and identify errors before they occur.","title":"What is type hinting?"},{"location":"intro-to-python/week-3.2/#input-type-hinting","text":"If we look at a basic function: def type_hunt ( var , var_i ): total_var = var [ 0 ] + str ( var_i ) return total_var we have defined a function that has two input variables var and var_i and both of them are required (they don't have a default value). However, we have no idea what format/type the function is expecting var and var_i to be as var_i. If we write the same function with type hinting, we'd get the following: from typing import List def type_hunt_ ( var : List [ str ], var_i : int = 2 ): total_var = var [ 0 ] + str ( var_i ) return total_var By defining that var is expected to be a list of strings, and var_i is expected to be an integer, the function itself becomes a lot easier to understand for someone reading through your code. We have also set var_i to default to 2 when no argument is provided so we're clear that it's optional and neither python or the IDE will raise an error that not enough arguments are provided when the function is called without var_i. Type hinting in this way also allows an IDE or type hinter to visually alert you when you try to to pass in a variable of the incorrect type (usually denoted by a red underline within your code).","title":"Input type hinting"},{"location":"intro-to-python/week-3.2/#output-type-hinting","text":"The other aspect of type hinting is defining what is being returned. def type_hunt_ ( var : List [ str ], var_i : int ) -> str : total_var = var [ 0 ] + str ( var_i ) return total_var In this function we have defined that we're expecting total_var to be returned as a string so any functions that take in total_var as in input can then be coded and appropriately. Some other examples of different types commonly seen in functions and declared using type hinting: def examples_typing ( is_it : bool = True , coords : tuple , multiple : float , options : list , option_info : dict ) -> float : pass","title":"Output type hinting"},{"location":"intro-to-python/week-4.0/","text":"Handling Errors \u00a4 Key Info Created date 02/02/2021 Previous knowledge None What you will learn Try Except Exception Raising Errors Mentors Learning resource Coursera follow along course Description \u00a4 desc...","title":"Handling Errors"},{"location":"intro-to-python/week-4.0/#handling-errors","text":"Key Info Created date 02/02/2021 Previous knowledge None What you will learn Try Except Exception Raising Errors Mentors Learning resource Coursera follow along course","title":"Handling Errors"},{"location":"intro-to-python/week-4.0/#description","text":"desc...","title":"Description"},{"location":"intro-to-python/week-4.1/","text":"Building Commandline Applications \u00a4 Key Info Created date 02/02/2021 Previous knowledge None What you will learn Commandline Applications Mentors Learning resource Coursera follow along course Description \u00a4 desc...","title":"Building Commandline Applications"},{"location":"intro-to-python/week-4.1/#building-commandline-applications","text":"Key Info Created date 02/02/2021 Previous knowledge None What you will learn Commandline Applications Mentors Learning resource Coursera follow along course","title":"Building Commandline Applications"},{"location":"intro-to-python/week-4.1/#description","text":"desc...","title":"Description"},{"location":"intro-to-python/week-5.0/","text":"Workflow - Version Control \u00a4 Key Info Created date 08/02/2021 Previous knowledge None What you will learn Git Version Control Git Commands Mentors Learning resources Atlassian Git Branching Git reference docs Description \u00a4 This session will cover what version control is, why we use it and how to open source your code and make it available for anyone to use Facts for the session \u00a4 The origin of the name \"git\" was originally a play on the British slang for an unpleasant person. Currently the README on the source code has the following: \"git\" can mean anything, depending on your mood. random three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of \"get\" may or may not be relevant. stupid. contemptible and despicable. simple. Take your pick from the dictionary of slang. \"global information tracker\": you're in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room. \"goddamn idiotic truckload of sh*t\": when it breaks What is source control? \u00a4 Imaging you're creating a powerpoint presentation or a word document that you want to present to a client. If you're working on it with multiple people then you'll likely have multiple versions of the file stored in different locations that signify different stages of completion: draft, v1, revised, final, finalfinal, goldv1, honestlyreallyfinal etc. At it's core, this is a very basic version of source control where you're taking a snapshot of the file at a point in time with everyone's contributions compiled together. As you probably know, this isn't a neat way to approach developing a file as it can quickly become unmanageable as it spirals into many many different versions on people's computers or emailed between people. Developers of this kind of software have moved towards cloud based collaboration platforms like Office365 or Google Workspace which provide a single document that can be continuously built upon with an associated history of changes that can be viewed or reverted back to if required. When we talk about software source control, we're operating on a similar principle whereby a single code repository (often called a repo for short) becomes the single source of information for a paricular program. The repo is generally stored in a central place that is accessible by developers who can make a local copy of this code and work on it themselves. They're able to make changes or add new features without impacting the source code. When they're finished with the feature, they can merge their changes back into the remote repo which will make their changes availabel to be immediately pulled down by other developers and a full history of the changes to the program is maintained through keeping a log of commits. Git \u00a4 One of the most popular and widespread source control tools is Git which was originally created to support development of the Linux kernel because nothing else available was fit for purpose. When designing git, Linus Torvald, the father of Linux, had a few main design principles: It should support a distributed workflow It should Include very strong safeguards against corruption, either accidental or malicious As such, Git allows many developers to work on code simultaneously from anywhere and has strong history and version control aspects to help maintain the integrity of any repo. If you're working in a linux environment, git can get quickly installed using: apt-get install git Below, we'll go through some of the main steps for starting and managing your own git repository via the commandline. Later on we'll cover off how you can manage your repo through other programs (i.e Github, Bitbucket). Initialising \u00a4 To initalise a git repository, you need to navigate to the root directory of either an existing code base that isn't in a repo, or where you plan on developing your code. Once in the root directory, you can run the following command. git init This will create a new local git repo that you can start live development and branching from. Branching \u00a4 When a repo is first initialised, a default 'branch' is created (the light blue line in the above image), generally called main or master, which is the complete source of truth for anyone looking at the code and this will continue as long as the repo is maintained. For larger teams where a pre-prod or development environment is required, often a develop branch is created to add another degree of separation and safety between main/production and active development efforts. This also supports robust testing prior to pushing the code live to end users. If you want to make changes to the source code like fixing a bug, adding a feature or refactoring old code, you can create a new 'branch' off the main development trunk which contains an exact copy of the source code. This allows you to undertake their development work without actually directly interfering with the source code until you're ready to and your changes are accepted by the repository owners/maintainers. To create a new branch from main, first you check what branch you're on by running the git branch command: git branch # Will return main or master To actually create a new branch, you then need to checkout and at the same time create a new branch in your local repo with: git checkout -b feature/branch_name If you want to see all the branches you have stored locally you can run: git branch -a # Should now show main and feature/branch_name as available branches When creating a new branch, it's best practice to name your branch related to what you're working on: Feature Branches \u00a4 Feature branches, denoted by feature/branch_name , are for a new feature that might persist across multiple development cycles/deployments depending on the size of the feature. No matter when it get's completed it will be merged back into the main development branch. Hotfix Branches \u00a4 Hotfix branches, denoted by hotfix/branch_name are short-lived and used for immediate fixes that need to be merged back into the source code as soon as possible due to critcial issues in production. Bug Branches \u00a4 Bug branches, bug/branch_name , are for resolving a bug in the code that doesn't need to be resolved immediately, but will generally be pushed as part of the next deployment if possible. Making changes to a branch \u00a4 As you're developing your code, git will constantly keep track of all your changes when you save your file and how they differ from the code of the branch you're currently on. When you decide you want to lock your changes in and make a permanent change to the branch, there are a few steps you have to follow. Staging changes \u00a4 The first step is to stage your changes for commit which is telling git that you intend to commit and save these changes permanently. You can check what files have been modified by using git status which will return a list of files that are staged for commit, not staged for commit or untracked i.e new. git status You can choose to stage everything by running: git add . where the . denotes everything. Similarly you can stage individual files by replacing the . with the specific filepath. git add src/myproject/myfile.py If you're using VSCode, there is a source control tab on the left panel generally located below the search (magnifying glass) which will show all the changes you've made in a bit of a neater UI. You can also stage files by pressing the + button beside each file which you'll see will move the files from Changes to Staged Changes . Committing changes \u00a4 When you've staged all the files you intend to commit, you have to add a commit message prior to actually committing them. The commit message should be a descriptive summary of the changes you've made so if someone else wants to check, they can quickly and easily understand what you did. The only time when you can get away with not having a detailed commit message is when you're either merging in changes from the main branch, \"Merged develop into branch\" or initialising a git repo \"Initial commit\" . The code to commit your changes and write a commit message is: git commit -m \"Write your commit message here in as much detail and specifics as you can\" If you're using VSCode, when your files are staged for commit you can write your commit message at the top of the source control tab and press ctrl+Enter to commit the changes to your current branch. Pushing your changes \u00a4 So far everything we've done has been focused on working locally and hasn't touched on developing using a remote respository. So the changes you've made are now committed to your local branch on a commit with a unique ID that can be searched/returned to a later date. However, if you're working on a git repo that is stored somewhere else (Github, Bitbucket etc.) then you need to push your committed changes up to the remote branch so they're captured and stored. To do this you can simply run: git push This will work if your branch is up to date with the remote and the remote branch exists, storing your changes in a place where other people can access and pull from. If your remote branch doesn't yet exist, git will prompt to you setup an upstream connection for your branch, i.e make a connection between your local branch and a remote branch. This can be resolved by typing: git push --set-upstream origin feature/branch_name In the next section we'll cover off how to pull down changes other people make to the remote and how to raise Pull Requests and undergo code reviews with senior developers.","title":"Workflow - Version Control"},{"location":"intro-to-python/week-5.0/#workflow-version-control","text":"Key Info Created date 08/02/2021 Previous knowledge None What you will learn Git Version Control Git Commands Mentors Learning resources Atlassian Git Branching Git reference docs","title":"Workflow - Version Control"},{"location":"intro-to-python/week-5.0/#description","text":"This session will cover what version control is, why we use it and how to open source your code and make it available for anyone to use","title":"Description"},{"location":"intro-to-python/week-5.0/#facts-for-the-session","text":"The origin of the name \"git\" was originally a play on the British slang for an unpleasant person. Currently the README on the source code has the following: \"git\" can mean anything, depending on your mood. random three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of \"get\" may or may not be relevant. stupid. contemptible and despicable. simple. Take your pick from the dictionary of slang. \"global information tracker\": you're in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room. \"goddamn idiotic truckload of sh*t\": when it breaks","title":"Facts for the session"},{"location":"intro-to-python/week-5.0/#what-is-source-control","text":"Imaging you're creating a powerpoint presentation or a word document that you want to present to a client. If you're working on it with multiple people then you'll likely have multiple versions of the file stored in different locations that signify different stages of completion: draft, v1, revised, final, finalfinal, goldv1, honestlyreallyfinal etc. At it's core, this is a very basic version of source control where you're taking a snapshot of the file at a point in time with everyone's contributions compiled together. As you probably know, this isn't a neat way to approach developing a file as it can quickly become unmanageable as it spirals into many many different versions on people's computers or emailed between people. Developers of this kind of software have moved towards cloud based collaboration platforms like Office365 or Google Workspace which provide a single document that can be continuously built upon with an associated history of changes that can be viewed or reverted back to if required. When we talk about software source control, we're operating on a similar principle whereby a single code repository (often called a repo for short) becomes the single source of information for a paricular program. The repo is generally stored in a central place that is accessible by developers who can make a local copy of this code and work on it themselves. They're able to make changes or add new features without impacting the source code. When they're finished with the feature, they can merge their changes back into the remote repo which will make their changes availabel to be immediately pulled down by other developers and a full history of the changes to the program is maintained through keeping a log of commits.","title":"What is source control?"},{"location":"intro-to-python/week-5.0/#git","text":"One of the most popular and widespread source control tools is Git which was originally created to support development of the Linux kernel because nothing else available was fit for purpose. When designing git, Linus Torvald, the father of Linux, had a few main design principles: It should support a distributed workflow It should Include very strong safeguards against corruption, either accidental or malicious As such, Git allows many developers to work on code simultaneously from anywhere and has strong history and version control aspects to help maintain the integrity of any repo. If you're working in a linux environment, git can get quickly installed using: apt-get install git Below, we'll go through some of the main steps for starting and managing your own git repository via the commandline. Later on we'll cover off how you can manage your repo through other programs (i.e Github, Bitbucket).","title":"Git"},{"location":"intro-to-python/week-5.0/#initialising","text":"To initalise a git repository, you need to navigate to the root directory of either an existing code base that isn't in a repo, or where you plan on developing your code. Once in the root directory, you can run the following command. git init This will create a new local git repo that you can start live development and branching from.","title":"Initialising"},{"location":"intro-to-python/week-5.0/#branching","text":"When a repo is first initialised, a default 'branch' is created (the light blue line in the above image), generally called main or master, which is the complete source of truth for anyone looking at the code and this will continue as long as the repo is maintained. For larger teams where a pre-prod or development environment is required, often a develop branch is created to add another degree of separation and safety between main/production and active development efforts. This also supports robust testing prior to pushing the code live to end users. If you want to make changes to the source code like fixing a bug, adding a feature or refactoring old code, you can create a new 'branch' off the main development trunk which contains an exact copy of the source code. This allows you to undertake their development work without actually directly interfering with the source code until you're ready to and your changes are accepted by the repository owners/maintainers. To create a new branch from main, first you check what branch you're on by running the git branch command: git branch # Will return main or master To actually create a new branch, you then need to checkout and at the same time create a new branch in your local repo with: git checkout -b feature/branch_name If you want to see all the branches you have stored locally you can run: git branch -a # Should now show main and feature/branch_name as available branches When creating a new branch, it's best practice to name your branch related to what you're working on:","title":"Branching"},{"location":"intro-to-python/week-5.0/#feature-branches","text":"Feature branches, denoted by feature/branch_name , are for a new feature that might persist across multiple development cycles/deployments depending on the size of the feature. No matter when it get's completed it will be merged back into the main development branch.","title":"Feature Branches"},{"location":"intro-to-python/week-5.0/#hotfix-branches","text":"Hotfix branches, denoted by hotfix/branch_name are short-lived and used for immediate fixes that need to be merged back into the source code as soon as possible due to critcial issues in production.","title":"Hotfix Branches"},{"location":"intro-to-python/week-5.0/#bug-branches","text":"Bug branches, bug/branch_name , are for resolving a bug in the code that doesn't need to be resolved immediately, but will generally be pushed as part of the next deployment if possible.","title":"Bug Branches"},{"location":"intro-to-python/week-5.0/#making-changes-to-a-branch","text":"As you're developing your code, git will constantly keep track of all your changes when you save your file and how they differ from the code of the branch you're currently on. When you decide you want to lock your changes in and make a permanent change to the branch, there are a few steps you have to follow.","title":"Making changes to a branch"},{"location":"intro-to-python/week-5.0/#staging-changes","text":"The first step is to stage your changes for commit which is telling git that you intend to commit and save these changes permanently. You can check what files have been modified by using git status which will return a list of files that are staged for commit, not staged for commit or untracked i.e new. git status You can choose to stage everything by running: git add . where the . denotes everything. Similarly you can stage individual files by replacing the . with the specific filepath. git add src/myproject/myfile.py If you're using VSCode, there is a source control tab on the left panel generally located below the search (magnifying glass) which will show all the changes you've made in a bit of a neater UI. You can also stage files by pressing the + button beside each file which you'll see will move the files from Changes to Staged Changes .","title":"Staging changes"},{"location":"intro-to-python/week-5.0/#committing-changes","text":"When you've staged all the files you intend to commit, you have to add a commit message prior to actually committing them. The commit message should be a descriptive summary of the changes you've made so if someone else wants to check, they can quickly and easily understand what you did. The only time when you can get away with not having a detailed commit message is when you're either merging in changes from the main branch, \"Merged develop into branch\" or initialising a git repo \"Initial commit\" . The code to commit your changes and write a commit message is: git commit -m \"Write your commit message here in as much detail and specifics as you can\" If you're using VSCode, when your files are staged for commit you can write your commit message at the top of the source control tab and press ctrl+Enter to commit the changes to your current branch.","title":"Committing changes"},{"location":"intro-to-python/week-5.0/#pushing-your-changes","text":"So far everything we've done has been focused on working locally and hasn't touched on developing using a remote respository. So the changes you've made are now committed to your local branch on a commit with a unique ID that can be searched/returned to a later date. However, if you're working on a git repo that is stored somewhere else (Github, Bitbucket etc.) then you need to push your committed changes up to the remote branch so they're captured and stored. To do this you can simply run: git push This will work if your branch is up to date with the remote and the remote branch exists, storing your changes in a place where other people can access and pull from. If your remote branch doesn't yet exist, git will prompt to you setup an upstream connection for your branch, i.e make a connection between your local branch and a remote branch. This can be resolved by typing: git push --set-upstream origin feature/branch_name In the next section we'll cover off how to pull down changes other people make to the remote and how to raise Pull Requests and undergo code reviews with senior developers.","title":"Pushing your changes"},{"location":"intro-to-python/week-5.1/","text":"Building an Open Source Application \u00a4 Key Info Created date 02/02/2021 Previous knowledge None What you will learn Open Source GitHub Mentors Learning resource Coursera follow along course Description \u00a4 desc...","title":"Building an Open Source Application"},{"location":"intro-to-python/week-5.1/#building-an-open-source-application","text":"Key Info Created date 02/02/2021 Previous knowledge None What you will learn Open Source GitHub Mentors Learning resource Coursera follow along course","title":"Building an Open Source Application"},{"location":"intro-to-python/week-5.1/#description","text":"desc...","title":"Description"},{"location":"intro-to-python/capstone/board_game/","text":"Application - \ud83c\udfb2 Board games \u00a4 Key Info Created date 06/02/2021 Previous knowledge None required What you will learn Emulation Board Game Mentor Learning resource Capstone template code Problem \u00a4 Create a basic commandline application using Python 3.6+ that allows a user to play a game of \"pythons\" and ladders (snakes and ladders). Your code should be well documented with a docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected and type annotations and finally well formatted using Black. This is so other developers can understand how to help build upon your program. You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your app should support, as well as how we expect them to show up can be found in the table below. Each board should be composed of a 5x5 grid where each square can either be blank, a python or a ladder. If it is a python or a ladder, then we need to know what square it leads to. Operation Usage Start a new single player game \"python3 board_game.py\" Keep the game running until cancelled by the player or the game is completed \"Game is active\" Roll a 6 sided die \"Press a button to roll the die\" Print out the player's current location on the board \"You're currently on square X\" Move a player to a new square based on their die roll \"You rolled an X, moving player forward X squares\" Move a player to a different square if it lands on a python \"Oh no, you've landed on a python, sliding back to square X\" Move a player to a different square if it lands on a ladder \"Awesome roll! You've landed on a ladder, climbing up to square X\" Game finishes when the player exceeds the final square \"You've reached the final square and won the game. Congratulations!\" Load in a game board from a json file \"Successfully loaded board Y\" Optional Extras \u00a4 Dynamically generate a new board each game using code. Give the player an option to choose their difficulty which determines the ratio of pythons/ladders/blanks Make a the game multiplayer Visualise the board layout with current player location in ASCII Require the final roll to be the exact number required to get to 25 or else move back squares Save a game in progress and load it later","title":"Board game emulation"},{"location":"intro-to-python/capstone/board_game/#application-board-games","text":"Key Info Created date 06/02/2021 Previous knowledge None required What you will learn Emulation Board Game Mentor Learning resource Capstone template code","title":"Application - \ud83c\udfb2 Board games"},{"location":"intro-to-python/capstone/board_game/#problem","text":"Create a basic commandline application using Python 3.6+ that allows a user to play a game of \"pythons\" and ladders (snakes and ladders). Your code should be well documented with a docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected and type annotations and finally well formatted using Black. This is so other developers can understand how to help build upon your program. You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your app should support, as well as how we expect them to show up can be found in the table below. Each board should be composed of a 5x5 grid where each square can either be blank, a python or a ladder. If it is a python or a ladder, then we need to know what square it leads to. Operation Usage Start a new single player game \"python3 board_game.py\" Keep the game running until cancelled by the player or the game is completed \"Game is active\" Roll a 6 sided die \"Press a button to roll the die\" Print out the player's current location on the board \"You're currently on square X\" Move a player to a new square based on their die roll \"You rolled an X, moving player forward X squares\" Move a player to a different square if it lands on a python \"Oh no, you've landed on a python, sliding back to square X\" Move a player to a different square if it lands on a ladder \"Awesome roll! You've landed on a ladder, climbing up to square X\" Game finishes when the player exceeds the final square \"You've reached the final square and won the game. Congratulations!\" Load in a game board from a json file \"Successfully loaded board Y\"","title":"Problem"},{"location":"intro-to-python/capstone/board_game/#optional-extras","text":"Dynamically generate a new board each game using code. Give the player an option to choose their difficulty which determines the ratio of pythons/ladders/blanks Make a the game multiplayer Visualise the board layout with current player location in ASCII Require the final roll to be the exact number required to get to 25 or else move back squares Save a game in progress and load it later","title":"Optional Extras"},{"location":"intro-to-python/capstone/cap_search/","text":"Application - \ud83d\udd75\ufe0f Building a basic search engine \u00a4 Key Info Created date 22/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code Problem \u00a4 Create a command line application using Python 3.6+ that allows you to create and search a database of documents using TF-IDF. The TF-IDF should be created using native python with no external libraries for the logic. Your code should be well documented with docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected, type annotations to allow other developers to understand how to help build upon your program and finally well formatted code (using Black). You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your program should support, as well as how we expect them to be called can be found in the table below. Operation Usage Required Upload a document to the search engine database. python cap_search.py upload \"/path/to/document.txt\" TRUE Upload all .txt documents in a directory to the search engine database. python cap_search.py upload-directory \"/path/to/directory\" TRUE Upload a newer version of an existing document to the search engine database. python cap_search.py update \"/path/to/document.txt\" TRUE Get a document from the search engine database to the current directory. python cap_search.py get \"document_name\" TRUE Get a document from the search engine database to the specified directory. python cap_search.py get \"document_name\" --path /path/to/output/document.txt TRUE Delete a document from the search engine database. python cap_search.py delete \"document_name\" TRUE Search the database for a document using the given terms. python cap_search.py search \"terms to search\" TRUE Search the database for a document and return it using the given terms and path. python cap_search.py search \"terms to search\" --return-path /path/to/output/document.txt TRUE Optional Extras \u00a4 Implement stop word removal and stemming to increase the quality of the TF-IDF estimates. You may use external libraries for this if you wish.","title":"Building a basic search engine"},{"location":"intro-to-python/capstone/cap_search/#application-building-a-basic-search-engine","text":"Key Info Created date 22/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code","title":"Application - \ud83d\udd75\ufe0f Building a basic search engine"},{"location":"intro-to-python/capstone/cap_search/#problem","text":"Create a command line application using Python 3.6+ that allows you to create and search a database of documents using TF-IDF. The TF-IDF should be created using native python with no external libraries for the logic. Your code should be well documented with docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected, type annotations to allow other developers to understand how to help build upon your program and finally well formatted code (using Black). You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your program should support, as well as how we expect them to be called can be found in the table below. Operation Usage Required Upload a document to the search engine database. python cap_search.py upload \"/path/to/document.txt\" TRUE Upload all .txt documents in a directory to the search engine database. python cap_search.py upload-directory \"/path/to/directory\" TRUE Upload a newer version of an existing document to the search engine database. python cap_search.py update \"/path/to/document.txt\" TRUE Get a document from the search engine database to the current directory. python cap_search.py get \"document_name\" TRUE Get a document from the search engine database to the specified directory. python cap_search.py get \"document_name\" --path /path/to/output/document.txt TRUE Delete a document from the search engine database. python cap_search.py delete \"document_name\" TRUE Search the database for a document using the given terms. python cap_search.py search \"terms to search\" TRUE Search the database for a document and return it using the given terms and path. python cap_search.py search \"terms to search\" --return-path /path/to/output/document.txt TRUE","title":"Problem"},{"location":"intro-to-python/capstone/cap_search/#optional-extras","text":"Implement stop word removal and stemming to increase the quality of the TF-IDF estimates. You may use external libraries for this if you wish.","title":"Optional Extras"},{"location":"intro-to-python/capstone/external_apis/","text":"Application - \ud83d\udc69\u200d\ud83d\udcbb External API's \u00a4 Key Info Created date 06/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code Problem \u00a4 Create a commandline application using Python 3.6+ that allows you to todo list on an extrnal API. Your code should be well documented with a docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected, type annotations to allow other developers to understand how to help build upon your program and finally well formatted code (using Black). You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your should support, as well as how we expect them to be called can be found in the table below. Operation Usage Required Add a todo python api.py add-task --name \"What is up\" --comment \"Here we are again\" TRUE Read all todos python api.py list-all TRUE Read todos with filtering python api.py list-all --id \"1\" --name \"Get the dog\" --completed False --comment \"Too hard\" --limit \"3\" TRUE Update task python api.py update-task --name \"Get going\" --complete True --comment \"Tough job\" TRUE Delete task python api.py delete-task --id \"1\" TRUE Mark task as done python api.py mark-as-done --id \"1\" TRUE About the API you will use \u00a4 For this excercise, you will be given an address to an API endpoint on mockapi.io . The data is in form of a todo list and has the fields id , name , completed and comments . However, the comments are in a nested list: Every todo item in the first todo list, is linked to only one other item in the comments list through the id field. (ergo the idea of the nested list). A part of the challenge is to find out a good way to handle this nested nature of data structure in your interaction with the API. i.e. represent a task with all its fields when you make a query to the API even though the comment field is in a separate list. Limitaions of the API \u00a4 Another part of the challenge is to be mindful of the limitations of the mockapi.io API provided to you. They include: - Mockapi allows you to make 15 requests within 20 seconds. - Multi-search parameters are not yet supported. I recommend looking up mockapi's short documentation regarding available searching methods. Optional Extras \u00a4 Representing responses from API in a pretty json format or using tabulate to represent them as lovely tables. Incorporate ascii art into visualising your responses. Visualize the todo list using ascii art Use different colors for the completion state of the task items Can you find a way to make the code faster? (i.e. using http.cookiejar module and sessions, using concurrency etc)","title":"Interacting with external API's"},{"location":"intro-to-python/capstone/external_apis/#application-external-apis","text":"Key Info Created date 06/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code","title":"Application - \ud83d\udc69\u200d\ud83d\udcbb External API's"},{"location":"intro-to-python/capstone/external_apis/#problem","text":"Create a commandline application using Python 3.6+ that allows you to todo list on an extrnal API. Your code should be well documented with a docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected, type annotations to allow other developers to understand how to help build upon your program and finally well formatted code (using Black). You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your should support, as well as how we expect them to be called can be found in the table below. Operation Usage Required Add a todo python api.py add-task --name \"What is up\" --comment \"Here we are again\" TRUE Read all todos python api.py list-all TRUE Read todos with filtering python api.py list-all --id \"1\" --name \"Get the dog\" --completed False --comment \"Too hard\" --limit \"3\" TRUE Update task python api.py update-task --name \"Get going\" --complete True --comment \"Tough job\" TRUE Delete task python api.py delete-task --id \"1\" TRUE Mark task as done python api.py mark-as-done --id \"1\" TRUE","title":"Problem"},{"location":"intro-to-python/capstone/external_apis/#about-the-api-you-will-use","text":"For this excercise, you will be given an address to an API endpoint on mockapi.io . The data is in form of a todo list and has the fields id , name , completed and comments . However, the comments are in a nested list: Every todo item in the first todo list, is linked to only one other item in the comments list through the id field. (ergo the idea of the nested list). A part of the challenge is to find out a good way to handle this nested nature of data structure in your interaction with the API. i.e. represent a task with all its fields when you make a query to the API even though the comment field is in a separate list.","title":"About the API you will use"},{"location":"intro-to-python/capstone/external_apis/#limitaions-of-the-api","text":"Another part of the challenge is to be mindful of the limitations of the mockapi.io API provided to you. They include: - Mockapi allows you to make 15 requests within 20 seconds. - Multi-search parameters are not yet supported. I recommend looking up mockapi's short documentation regarding available searching methods.","title":"Limitaions of the API"},{"location":"intro-to-python/capstone/external_apis/#optional-extras","text":"Representing responses from API in a pretty json format or using tabulate to represent them as lovely tables. Incorporate ascii art into visualising your responses. Visualize the todo list using ascii art Use different colors for the completion state of the task items Can you find a way to make the code faster? (i.e. using http.cookiejar module and sessions, using concurrency etc)","title":"Optional Extras"},{"location":"intro-to-python/capstone/intro/","text":"Intro to Python Capstone Projects \u00a4 The Capstone project is a way to apply all that you've learnt over the course of our Introduction to Python course and get your hands dirty with your own project. It's also a good way to add a repo to your github account to showcase what you've been up to. Below are the options we have for you to choose for your Capstone project. Each project has been designed by at least 1 mentor who will be available for any questions you might have or guidance for how to approach the problem over the course of the Capstone. If you're unable to reach your assigned mentor or just have a general Python question, then our team of mentors are available to answer questions that are posted in the PyCap General channel on Teams and other people might have the same questions as you! Capstone Project Options \u00a4 Board game emulation Interacting with external API's Encryption and secrets manager Building a TODO list Scraping the web for data Building a basic search engine","title":"Introduction"},{"location":"intro-to-python/capstone/intro/#intro-to-python-capstone-projects","text":"The Capstone project is a way to apply all that you've learnt over the course of our Introduction to Python course and get your hands dirty with your own project. It's also a good way to add a repo to your github account to showcase what you've been up to. Below are the options we have for you to choose for your Capstone project. Each project has been designed by at least 1 mentor who will be available for any questions you might have or guidance for how to approach the problem over the course of the Capstone. If you're unable to reach your assigned mentor or just have a general Python question, then our team of mentors are available to answer questions that are posted in the PyCap General channel on Teams and other people might have the same questions as you!","title":"Intro to Python Capstone Projects"},{"location":"intro-to-python/capstone/intro/#capstone-project-options","text":"Board game emulation Interacting with external API's Encryption and secrets manager Building a TODO list Scraping the web for data Building a basic search engine","title":"Capstone Project Options"},{"location":"intro-to-python/capstone/secrets/","text":"Application - \ud83e\udd10 Secrets \u00a4 Key Info Created date 06/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code Problem \u00a4 Create a commandline application using Python 3.6+ that allows you to encrypt and decrypt messages using different ciphers. Your code should be well documented with docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected, type annotations to allow other developers to understand how to help build upon your program and finally well formatted code (using Black). You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your should support, as well as how we expect them to be called can be found in the table below. Background information on ciphers \u00a4 A cipher is an algorithm (series of well-defined steps) used to perform encryption or decryption. Your task for this Capstone project is to encode and decode messages using the following five ciphers. These ciphers are well-known methods of encoding plain text messages. The Hex Cipher \u00a4 The Hex Cipher involves converting alphanumeric characters into hexadecimal numbers (and vice versa). All alphanumeric characters are represented by a unique decimal number (like an ID), and this number can be written as a hexadecimal number (in base 16). The AtBash Cipher \u00a4 The AtBash Cipher is a simple, symmetric cipher that involves substituting letters of the plaintext alphabet with the corresponding letter of the reversed alphabet. For example, an 'a' would be represented by a 'z', 'b' would be represented by a 'y', a 'c' would be represented by a 'x', and so on. The cipher alphabet can be expanded to include more than just the 26 letters of the alphabet. The Caesar Cipher \u00a4 The Caesar Cipher is another simple cipher that involves substituting the letters of the plaintext alphabet with the letter located some fixed number of letters down the alphabet. For example, if we set the shift to 5 letters ahead, then 'a' would be represented by 'f', 'b' would be represented by 'g', 'z' would be represented by 'd', and so on. The Keyword Cipher \u00a4 The Keyword Cipher involves replacing a block of consecutive characters in the alphabet (starting at the beginning) with a chosen keyword (with any repeat letters removed). All other characters that do not appear in the chosen keyword are placed directly after the keyword in alphabetical order, to form the cipher alphabet. The Vigen\u00e8re Cipher \u00a4 The Vigen\u00e8re Cipher is a more complicated cipher that also involves a keyword. The letter substitution for a particular plaintext letter is not always the same, as it has been for the above ciphers. A Vigen\u00e8re square can be used to find the correct cipher letter for each plaintext letter. Code Operation \u00a4 You should write your code so that you can encrypt and decrypt messages in the command line, as specified in the table below. Operation Usage Required Encode a message using a Hex cipher python secrets.py hex encode \"<MESSAGE>\" TRUE Decode a message using a Hex cipher python secrets.py hex decode \"<ENCRYPTED-MESSAGE>\" TRUE Encode a message using a AtBash cipher python secrets.py atbash encode \"<MESSAGE>\" TRUE Decode a message using a AtBash cipher python secrets.py atbash decode \"<ENCRYPTED-MESSAGE>\" TRUE Encode a message using a Caesar cipher python secrets.py caesar encode 3 \"<MESSAGE>\" TRUE Decode a message using a Caesar cipher python secrets.py caesar decode 3 \"<ENCRYPTED-MESSAGE>\" TRUE Encode a message using a Keyword cipher python secrets.py keyword encode \"<KEYWORD>\" \"<MESSAGE>\" TRUE Decode a message using a Keyword cipher python secrets.py keyword decode \"<KEYWORD>\" \"<ENCRYPTED-MESSAGE>\" TRUE Encode a message using a Vigen\u00e8re cipher python secrets.py vigenere encode \"<KEYWORD>\" \"<MESSAGE>\" TRUE Decode a message using a Vigen\u00e8re cipher python secrets.py vigenere decode \"<KEYWORD>\" \"<ENCRYPTED-MESSAGE>\" TRUE Optional Extras \u00a4 Try to encode messages using more advanced ciphers of your own choosing","title":"Encryption and secrets manager"},{"location":"intro-to-python/capstone/secrets/#application-secrets","text":"Key Info Created date 06/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code","title":"Application - \ud83e\udd10 Secrets"},{"location":"intro-to-python/capstone/secrets/#problem","text":"Create a commandline application using Python 3.6+ that allows you to encrypt and decrypt messages using different ciphers. Your code should be well documented with docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected, type annotations to allow other developers to understand how to help build upon your program and finally well formatted code (using Black). You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your should support, as well as how we expect them to be called can be found in the table below.","title":"Problem"},{"location":"intro-to-python/capstone/secrets/#background-information-on-ciphers","text":"A cipher is an algorithm (series of well-defined steps) used to perform encryption or decryption. Your task for this Capstone project is to encode and decode messages using the following five ciphers. These ciphers are well-known methods of encoding plain text messages.","title":"Background information on ciphers"},{"location":"intro-to-python/capstone/secrets/#the-hex-cipher","text":"The Hex Cipher involves converting alphanumeric characters into hexadecimal numbers (and vice versa). All alphanumeric characters are represented by a unique decimal number (like an ID), and this number can be written as a hexadecimal number (in base 16).","title":"The Hex Cipher"},{"location":"intro-to-python/capstone/secrets/#the-atbash-cipher","text":"The AtBash Cipher is a simple, symmetric cipher that involves substituting letters of the plaintext alphabet with the corresponding letter of the reversed alphabet. For example, an 'a' would be represented by a 'z', 'b' would be represented by a 'y', a 'c' would be represented by a 'x', and so on. The cipher alphabet can be expanded to include more than just the 26 letters of the alphabet.","title":"The AtBash Cipher"},{"location":"intro-to-python/capstone/secrets/#the-caesar-cipher","text":"The Caesar Cipher is another simple cipher that involves substituting the letters of the plaintext alphabet with the letter located some fixed number of letters down the alphabet. For example, if we set the shift to 5 letters ahead, then 'a' would be represented by 'f', 'b' would be represented by 'g', 'z' would be represented by 'd', and so on.","title":"The Caesar Cipher"},{"location":"intro-to-python/capstone/secrets/#the-keyword-cipher","text":"The Keyword Cipher involves replacing a block of consecutive characters in the alphabet (starting at the beginning) with a chosen keyword (with any repeat letters removed). All other characters that do not appear in the chosen keyword are placed directly after the keyword in alphabetical order, to form the cipher alphabet.","title":"The Keyword Cipher"},{"location":"intro-to-python/capstone/secrets/#the-vigenere-cipher","text":"The Vigen\u00e8re Cipher is a more complicated cipher that also involves a keyword. The letter substitution for a particular plaintext letter is not always the same, as it has been for the above ciphers. A Vigen\u00e8re square can be used to find the correct cipher letter for each plaintext letter.","title":"The Vigen\u00e8re Cipher"},{"location":"intro-to-python/capstone/secrets/#code-operation","text":"You should write your code so that you can encrypt and decrypt messages in the command line, as specified in the table below. Operation Usage Required Encode a message using a Hex cipher python secrets.py hex encode \"<MESSAGE>\" TRUE Decode a message using a Hex cipher python secrets.py hex decode \"<ENCRYPTED-MESSAGE>\" TRUE Encode a message using a AtBash cipher python secrets.py atbash encode \"<MESSAGE>\" TRUE Decode a message using a AtBash cipher python secrets.py atbash decode \"<ENCRYPTED-MESSAGE>\" TRUE Encode a message using a Caesar cipher python secrets.py caesar encode 3 \"<MESSAGE>\" TRUE Decode a message using a Caesar cipher python secrets.py caesar decode 3 \"<ENCRYPTED-MESSAGE>\" TRUE Encode a message using a Keyword cipher python secrets.py keyword encode \"<KEYWORD>\" \"<MESSAGE>\" TRUE Decode a message using a Keyword cipher python secrets.py keyword decode \"<KEYWORD>\" \"<ENCRYPTED-MESSAGE>\" TRUE Encode a message using a Vigen\u00e8re cipher python secrets.py vigenere encode \"<KEYWORD>\" \"<MESSAGE>\" TRUE Decode a message using a Vigen\u00e8re cipher python secrets.py vigenere decode \"<KEYWORD>\" \"<ENCRYPTED-MESSAGE>\" TRUE","title":"Code Operation"},{"location":"intro-to-python/capstone/secrets/#optional-extras","text":"Try to encode messages using more advanced ciphers of your own choosing","title":"Optional Extras"},{"location":"intro-to-python/capstone/todo_list/","text":"Application - \ud83d\udcdd Todo list \u00a4 Key Info Created date 06/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code Problem \u00a4 Create a commandline application using Python 3.6+ that allows you to build and maintain a TODO list. Your code should be well documented with a docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected, type annotations to allow other developers to understand how to help build upon your program and finally well formatted code (using Black). You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your should support, as well as how we expect them to be called can be found in the table below. A TODO item should have at least a description, id and completion state Operation Usage Required Create a todo python todo_list.py create \"Take the washing out\" TRUE Create multiple todos python todo.py create \"Take the washing out\" \"Walk the dog\" TRUE Read (list) all todos python todo.py list-all TRUE Read (list) all todos that contain a given substring python todo.py list-all --substring \"dog\" TRUE Read (list) all todos that are complete python todo.py list-all --complete \"dog\" TRUE Read (list) all todos that are not complete python todo.py list --no-complete \"dog\" TRUE Update a todo description python todo.py toggle \"f7f6d502-dc35-40d2-b348-287a714b6978\" TRUE Update the state of a todo python todo.py update \"f7f6d502-dc35-40d2-b348-287a714b6978\" \"Walk all the dogs\" TRUE Delete a todo python todo.py delete \"f7f6d502-dc35-40d2-b348-287a714b6978\" TRUE Delete multiple todos python todo.py delete \"f7f6d502-dc35-40d2-b348-287a714b6978\" \"2be6199a-abec-42c8-8744-255cbb152d9c\" TRUE Delete all todos python todo.py delete-all TRUE Optional Extras \u00a4 Expand to multiple lists Have multiple states for a todo list - think something like a jira board Visualize the todo list using ascii art Use different colors for the completion state of the todo ... Use your imagination","title":"Building a TODO list"},{"location":"intro-to-python/capstone/todo_list/#application-todo-list","text":"Key Info Created date 06/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code","title":"Application - \ud83d\udcdd Todo list"},{"location":"intro-to-python/capstone/todo_list/#problem","text":"Create a commandline application using Python 3.6+ that allows you to build and maintain a TODO list. Your code should be well documented with a docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected, type annotations to allow other developers to understand how to help build upon your program and finally well formatted code (using Black). You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your should support, as well as how we expect them to be called can be found in the table below. A TODO item should have at least a description, id and completion state Operation Usage Required Create a todo python todo_list.py create \"Take the washing out\" TRUE Create multiple todos python todo.py create \"Take the washing out\" \"Walk the dog\" TRUE Read (list) all todos python todo.py list-all TRUE Read (list) all todos that contain a given substring python todo.py list-all --substring \"dog\" TRUE Read (list) all todos that are complete python todo.py list-all --complete \"dog\" TRUE Read (list) all todos that are not complete python todo.py list --no-complete \"dog\" TRUE Update a todo description python todo.py toggle \"f7f6d502-dc35-40d2-b348-287a714b6978\" TRUE Update the state of a todo python todo.py update \"f7f6d502-dc35-40d2-b348-287a714b6978\" \"Walk all the dogs\" TRUE Delete a todo python todo.py delete \"f7f6d502-dc35-40d2-b348-287a714b6978\" TRUE Delete multiple todos python todo.py delete \"f7f6d502-dc35-40d2-b348-287a714b6978\" \"2be6199a-abec-42c8-8744-255cbb152d9c\" TRUE Delete all todos python todo.py delete-all TRUE","title":"Problem"},{"location":"intro-to-python/capstone/todo_list/#optional-extras","text":"Expand to multiple lists Have multiple states for a todo list - think something like a jira board Visualize the todo list using ascii art Use different colors for the completion state of the todo ... Use your imagination","title":"Optional Extras"},{"location":"intro-to-python/capstone/web_scraping/","text":"Application - \ud83d\udd78\ufe0f Web scraping \u00a4 Key Info Created date 06/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code Capstone example of applying the learnings from PyCap intro to Python and create a web scraper to programmatically gather and analyse information Problem \u00a4 Create a basic commandline application using Python 3.6+ that allows a user scrap an information from various website. In this exercise we will scrape job postings from indeed website. Starting point for Web Scraping \u00a4 The starting step for building a webscraper is to familiarise yourself with the website you want to gather information from. These steps can include examining the website's URL and inspecting the website using browser's developer tools. Example \u00a4 Caching and Filtering \u00a4 You should by default cache any data you scrape - this will allow you to run your filtering offline and also help to limit your requests you make to the website (which they can ban your IP from if you make too many requests) With Indeed data, we will see if we can filter our scraped data and display jobs within our specified salary range and industry within Australia. Coding Standard and Practice \u00a4 Your code should be well-documented with a docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected and type annotations and finally well formatted using Black. This is so other developers can understand how to help build upon your program. You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your app should support, as well as how we expect them to show up can be found in the table below. Operation Usage Start the scaping process (This should use cached files if they exist and store them if they dont already exist) python3 indeed.py scrape Start the scaping process but ignore the cached data and force scrape from the indeed website python3 indeed.py scrape --no-cache Extract all job postings based on the location Australia python3 indeed.py filter --location \"Australia Extract all job postings based on the company rating of 3 and above and location Australia python3 indeed.py filter --rating 3 --location \"Australia\" Extract all job postings based on the salary range greater than $65000 and location Australia python3 indeed.py filter --salary 65000 --location \"Australia\" Extract all job postings based on the job title \"Consulting\" and location Australia python3 indeed.py filter --job \"Consulting\" --location \"Australia\" Save the jobs into json file called \"jobs.json\" python3 indeed.py filter --job \"Consulting\" --location \"Australia\" --save \"jobs.json\" Suggested URLs for Webscraping \u00a4 https://www2.asx.com.au/markets/trade-our-cash-market/todays-announcements ASX URL of the companies you are interested in (Hint: you can store the companies in a list) https://au.indeed.com/jobs?q=data+scientist&l=Sydney+NSW Indeed URL with your job and city queried (Hint: you can store jobs in a list) Suggested Library \u00a4 Beautiful Soup Scrapy Selenium When in doubt, Research and Google are your friends Suggested Additional Learning Resources \u00a4 Beautiful Soup: Build a Web Scraper With Python Web Scraping with Python - Beautiful Soup Crash Course Disclaimer \u00a4 Certain websites impose restrictions on scraping/gathering their data and information programmatically. Due to the simplicity of our scraper, if the script doesn't work and your code looks fine, it could mean that the sites contain levels of security to prevent scraping. These sites can also have Terms and Conditions restricting on the automation data gathering tool. Since you are not using them for commercial purposes, you should be alright. However always check for T&Cs in the future. Example of T&Cs \u00a4 Optional Extras \u00a4 Enhance the scraper further and save the information out into csv file Analyse and utilise the data and create an application from it Example for Advanced usage: Algorithm Trading on stock information or Resume Skill Matching for job posting Optional Activity (Bonus) \u00a4 With ASX data, we will see if we can determine the change in stock price based on the ASX Today Announcement. Web Scraping with ASX \u00a4 We will be talking about some of the steps that would let you start on analysing the change in stock price. Hint: ASX is a dynamic website, it is highly recommend that you check out Selenium library for your solution We need to identify which stocks have their announcement today, we can use our web scraper to extract the listed stocks from the page Then we can use the our extracted stocks and use the web scraper to fetch the today price and today's change from the selected stock pages We can then determine if there is any correlation between the announcement and the change in stock price for today","title":"Scraping the web for data"},{"location":"intro-to-python/capstone/web_scraping/#application-web-scraping","text":"Key Info Created date 06/02/2021 Previous knowledge None required Mentor Learning resource Capstone template code Capstone example of applying the learnings from PyCap intro to Python and create a web scraper to programmatically gather and analyse information","title":"Application - \ud83d\udd78\ufe0f Web scraping"},{"location":"intro-to-python/capstone/web_scraping/#problem","text":"Create a basic commandline application using Python 3.6+ that allows a user scrap an information from various website. In this exercise we will scrape job postings from indeed website.","title":"Problem"},{"location":"intro-to-python/capstone/web_scraping/#starting-point-for-web-scraping","text":"The starting step for building a webscraper is to familiarise yourself with the website you want to gather information from. These steps can include examining the website's URL and inspecting the website using browser's developer tools.","title":"Starting point for Web Scraping"},{"location":"intro-to-python/capstone/web_scraping/#example","text":"","title":"Example"},{"location":"intro-to-python/capstone/web_scraping/#caching-and-filtering","text":"You should by default cache any data you scrape - this will allow you to run your filtering offline and also help to limit your requests you make to the website (which they can ban your IP from if you make too many requests) With Indeed data, we will see if we can filter our scraped data and display jobs within our specified salary range and industry within Australia.","title":"Caching and Filtering"},{"location":"intro-to-python/capstone/web_scraping/#coding-standard-and-practice","text":"Your code should be well-documented with a docstrings, comments and a README describing how your program works, unit tests to ensure it works as expected and type annotations and finally well formatted using Black. This is so other developers can understand how to help build upon your program. You should add a summary to your README that includes the next steps (dot points) and also the strengths and weaknesses of your program in its current state. A list of operations that your app should support, as well as how we expect them to show up can be found in the table below. Operation Usage Start the scaping process (This should use cached files if they exist and store them if they dont already exist) python3 indeed.py scrape Start the scaping process but ignore the cached data and force scrape from the indeed website python3 indeed.py scrape --no-cache Extract all job postings based on the location Australia python3 indeed.py filter --location \"Australia Extract all job postings based on the company rating of 3 and above and location Australia python3 indeed.py filter --rating 3 --location \"Australia\" Extract all job postings based on the salary range greater than $65000 and location Australia python3 indeed.py filter --salary 65000 --location \"Australia\" Extract all job postings based on the job title \"Consulting\" and location Australia python3 indeed.py filter --job \"Consulting\" --location \"Australia\" Save the jobs into json file called \"jobs.json\" python3 indeed.py filter --job \"Consulting\" --location \"Australia\" --save \"jobs.json\"","title":"Coding Standard and Practice"},{"location":"intro-to-python/capstone/web_scraping/#suggested-urls-for-webscraping","text":"https://www2.asx.com.au/markets/trade-our-cash-market/todays-announcements ASX URL of the companies you are interested in (Hint: you can store the companies in a list) https://au.indeed.com/jobs?q=data+scientist&l=Sydney+NSW Indeed URL with your job and city queried (Hint: you can store jobs in a list)","title":"Suggested URLs for Webscraping"},{"location":"intro-to-python/capstone/web_scraping/#suggested-library","text":"Beautiful Soup Scrapy Selenium When in doubt, Research and Google are your friends","title":"Suggested Library"},{"location":"intro-to-python/capstone/web_scraping/#suggested-additional-learning-resources","text":"Beautiful Soup: Build a Web Scraper With Python Web Scraping with Python - Beautiful Soup Crash Course","title":"Suggested Additional Learning Resources"},{"location":"intro-to-python/capstone/web_scraping/#disclaimer","text":"Certain websites impose restrictions on scraping/gathering their data and information programmatically. Due to the simplicity of our scraper, if the script doesn't work and your code looks fine, it could mean that the sites contain levels of security to prevent scraping. These sites can also have Terms and Conditions restricting on the automation data gathering tool. Since you are not using them for commercial purposes, you should be alright. However always check for T&Cs in the future.","title":"Disclaimer"},{"location":"intro-to-python/capstone/web_scraping/#example-of-tcs","text":"","title":"Example of T&amp;Cs"},{"location":"intro-to-python/capstone/web_scraping/#optional-extras","text":"Enhance the scraper further and save the information out into csv file Analyse and utilise the data and create an application from it Example for Advanced usage: Algorithm Trading on stock information or Resume Skill Matching for job posting","title":"Optional Extras"},{"location":"intro-to-python/capstone/web_scraping/#optional-activity-bonus","text":"With ASX data, we will see if we can determine the change in stock price based on the ASX Today Announcement.","title":"Optional Activity (Bonus)"},{"location":"intro-to-python/capstone/web_scraping/#web-scraping-with-asx","text":"We will be talking about some of the steps that would let you start on analysing the change in stock price. Hint: ASX is a dynamic website, it is highly recommend that you check out Selenium library for your solution We need to identify which stocks have their announcement today, we can use our web scraper to extract the listed stocks from the page Then we can use the our extracted stocks and use the web scraper to fetch the today price and today's change from the selected stock pages We can then determine if there is any correlation between the announcement and the change in stock price for today","title":"Web Scraping with ASX"},{"location":"intro-to-python/project/tasks/","text":"Tasks \u00a4 \"Sprint\" 1 \u00a4 Task 1 \u00a4 Make a function called extract_age that extracts the age from a string and converts it to an integer Expected usage extract_age ( \"5 years old\" ) # Should return 5 as integer extract_age ( \"1 year old\" ) # Should return 1 as integer Sample solution def extract_age ( age_description ): trimmed = age_description . replace ( \" years old\" , \"\" ) . replace ( \" year old\" , \"\" ) return int ( trimmed ) Task 2 \u00a4 Make a function called extract_meal_names that extracts meal names from a list of dictionaries Expected usage extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }]) # Should return [\"pizza\"] extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return [\"pizza\", \"apples\"] Sample solution def extract_meal_names ( meals ): meal_names = [] for meal in meals : meal_names . append ( meal [ \"name\" ]) return meal_names Task 3 \u00a4 Extend extract_meal_names to only return unique meal names and they should be sorted alphabetically Expected usage extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }]) # Should return [\"pizza\"] extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return [\"pizza\", \"apples\"] extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return [\"pizza\", \"apples\"] Sample solution def extract_meal_names ( meals ): meal_names = set () for meal in meals : meal_names . add ( meal [ \"name\" ]) return sorted ( list ( meal_names )) Task 4 \u00a4 Make a function called extract_calorie_intake that finds the total calorie intake Expected usage extract_calorie_intake ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }]) # Should return 999.23 extract_calorie_intake ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return 1049.23 extract_calorie_intake ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return 1099.23 extract_calorie_intake ([{ \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"celery\" , \"calories\" : - 50 }]) # Should return 0 Sample solution def extract_calorie_intake ( meals ): total_intake = 0 for meal in meals : total_intake = total_intake + meal [ \"calories\" ] return total_intake Task 5 \u00a4 Make a function called flatten_person that flattens the given information into the expected format Expected usage # Given person = { \"name\" : \"Andrew\" , \"age\" : \"5 years old\" , \"meals\" : [ { \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, ], \"happy\" : True , \"location\" : { \"city\" : \"Melbourne\" , \"coords\" : ( 1000 , 3002 )}, \"optional_nickname\" : \"Andy\" , } flatten_person ( person ) # Should return { \"name\" : \"Andrew\" , \"age\" : 5 , \"meals\" : \"apples, pizza\" , \"calorie_intake\" : 1099.23 , \"happy\" : True , \"latitude\" : 1000 , \"longitude\" : 3002 , \"nickname\" : \"Andy\" , } Sample solution def flatten_person ( person ): return { \"name\" : person [ \"name\" ], \"age\" : extract_age ( person [ \"age\" ]), \"meals\" : \", \" . join ( extract_meal_names ( person [ \"meals\" ])), \"calorie_intake\" : extract_calorie_intake ( person [ \"meals\" ]), \"happy\" : person [ \"happy\" ], \"latitude\" : person [ \"location\" ][ \"coords\" ][ 0 ], \"longitude\" : person [ \"location\" ][ \"coords\" ][ 1 ], \"nickname\" : person . get ( \"optional_nickname\" , \"\" ), } Task 6 \u00a4 Make a function called flatten_people that flattens a list of people, but only uses them if they are happy Expected usage # Given people = [ { \"name\" : \"Andrew\" , \"age\" : \"5 years old\" , \"meals\" : [ { \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, ], \"happy\" : True , \"location\" : { \"city\" : \"Melbourne\" , \"coords\" : ( 1000 , 3002 )}, \"optional_nickname\" : \"Andy\" , }, { \"name\" : \"Jane\" , \"age\" : \"1 year old\" , \"meals\" : [ { \"name\" : \"celery\" , \"calories\" : - 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, ], \"happy\" : False , \"location\" : { \"city\" : \"New York\" , \"coords\" : ( 3009 , 10 )}, \"optional_nickname\" : \"Jan\" , }, ] flatten_people ( people ) # Should return [ { \"name\" : \"Andrew\" , \"age\" : 5 , \"meals\" : \"apples, pizza\" , \"calorie_intake\" : 1099.23 , \"happy\" : True , \"latitude\" : 1000 , \"longitude\" : 3002 , \"nickname\" : \"Andy\" , } ] Sample solution def flatten_people ( people ): happy_people = [] for person in people : if person [ \"happy\" ]: happy_people . append ( flatten_person ( person )) return happy_people \"Sprint\" 2 \u00a4 Task 7 \u00a4 Build a python data model class called Person that defines the information we will be receiving Expected usage [ { \"name\" : \"Andrew\" , \"age\" \"5 years old\" , \"meals\" : [ { \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 } ], \"happy\" : true , \"location\" : { \"city\" : \"Melbourne\" , \"coords\" : ( 1000 , 3002 ) }, \"optional_nickname\" : \"Andy\" } ] Sample solution from dataclasses import dataclass from typing import Optional , List , Tuple @dataclass class Meal : name : str calories : float @dataclass class Location : city : str coords : Tuple [ float , float ] @dataclass class Person : name : str age : str meals : List [ Meal ] happy : bool location : Location optional_nickname : Optional [ str ] Person ( ** { \"name\" : \"Andrew\" , \"age\" : \"5 years old\" , \"meals\" : [ { \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, ], \"happy\" : True , \"location\" : { \"city\" : \"Melbourne\" , \"coords\" : ( 1000 , 3002 )}, \"optional_nickname\" : \"Andy\" , } ) Task 8 \u00a4 Refactor your code to use multiple modules to tidy up Task 9 \u00a4 Read in a JSON file with data to process and run it through your flatten_people function Sample solution import json with open ( \"data.json\" , \"r\" ) as f : people = json . load ( f ) flatten_people ( people ) Task 10 \u00a4 Write out the information you have processed through flatten_people function into a CSV file Sample solution import json import pandas as pd with open ( \"data.json\" , \"r\" ) as f : people = json . load ( f ) flattened = flatten_people ( people ) data = pd . DataFrame ( flattened ) data . to_csv ( \"flattened_people.csv\" ) \"Sprint\" 3 \u00a4 Task 11 \u00a4 Add type annotations to your user defined functions Task 12 \u00a4 Add docstrings and inline comments to your user defined functions Task 13 \u00a4 Create a README.md defining how to use your ETL program Task 14 \u00a4 Create unit tests for your user defined functions with edge cases and ensure 100% coverage Task 15 \u00a4 Ensure your code is well formatted and passes standard linting rules \"Sprint\" 4 \u00a4 Task 16 \u00a4 Build your program into a commandline application using typer or pick Task 17 \u00a4 Add in error handling so that users that misuse your program get some feedback on how they can correct their mistakes Task 18 \u00a4 Iterate on unit tests to uplift your coverage back to 100% \"Sprint\" 5 \u00a4 Task 19 \u00a4 Add version control to your project by making it into a git repository Task 20 \u00a4 Push your application to GitHub so that you can work collaboratively with others on the project","title":"Tasks"},{"location":"intro-to-python/project/tasks/#tasks","text":"","title":"Tasks"},{"location":"intro-to-python/project/tasks/#sprint-1","text":"","title":"\"Sprint\" 1"},{"location":"intro-to-python/project/tasks/#task-1","text":"Make a function called extract_age that extracts the age from a string and converts it to an integer Expected usage extract_age ( \"5 years old\" ) # Should return 5 as integer extract_age ( \"1 year old\" ) # Should return 1 as integer Sample solution def extract_age ( age_description ): trimmed = age_description . replace ( \" years old\" , \"\" ) . replace ( \" year old\" , \"\" ) return int ( trimmed )","title":"Task 1"},{"location":"intro-to-python/project/tasks/#task-2","text":"Make a function called extract_meal_names that extracts meal names from a list of dictionaries Expected usage extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }]) # Should return [\"pizza\"] extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return [\"pizza\", \"apples\"] Sample solution def extract_meal_names ( meals ): meal_names = [] for meal in meals : meal_names . append ( meal [ \"name\" ]) return meal_names","title":"Task 2"},{"location":"intro-to-python/project/tasks/#task-3","text":"Extend extract_meal_names to only return unique meal names and they should be sorted alphabetically Expected usage extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }]) # Should return [\"pizza\"] extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return [\"pizza\", \"apples\"] extract_meal_names ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return [\"pizza\", \"apples\"] Sample solution def extract_meal_names ( meals ): meal_names = set () for meal in meals : meal_names . add ( meal [ \"name\" ]) return sorted ( list ( meal_names ))","title":"Task 3"},{"location":"intro-to-python/project/tasks/#task-4","text":"Make a function called extract_calorie_intake that finds the total calorie intake Expected usage extract_calorie_intake ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }]) # Should return 999.23 extract_calorie_intake ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return 1049.23 extract_calorie_intake ([{ \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }]) # Should return 1099.23 extract_calorie_intake ([{ \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"celery\" , \"calories\" : - 50 }]) # Should return 0 Sample solution def extract_calorie_intake ( meals ): total_intake = 0 for meal in meals : total_intake = total_intake + meal [ \"calories\" ] return total_intake","title":"Task 4"},{"location":"intro-to-python/project/tasks/#task-5","text":"Make a function called flatten_person that flattens the given information into the expected format Expected usage # Given person = { \"name\" : \"Andrew\" , \"age\" : \"5 years old\" , \"meals\" : [ { \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, ], \"happy\" : True , \"location\" : { \"city\" : \"Melbourne\" , \"coords\" : ( 1000 , 3002 )}, \"optional_nickname\" : \"Andy\" , } flatten_person ( person ) # Should return { \"name\" : \"Andrew\" , \"age\" : 5 , \"meals\" : \"apples, pizza\" , \"calorie_intake\" : 1099.23 , \"happy\" : True , \"latitude\" : 1000 , \"longitude\" : 3002 , \"nickname\" : \"Andy\" , } Sample solution def flatten_person ( person ): return { \"name\" : person [ \"name\" ], \"age\" : extract_age ( person [ \"age\" ]), \"meals\" : \", \" . join ( extract_meal_names ( person [ \"meals\" ])), \"calorie_intake\" : extract_calorie_intake ( person [ \"meals\" ]), \"happy\" : person [ \"happy\" ], \"latitude\" : person [ \"location\" ][ \"coords\" ][ 0 ], \"longitude\" : person [ \"location\" ][ \"coords\" ][ 1 ], \"nickname\" : person . get ( \"optional_nickname\" , \"\" ), }","title":"Task 5"},{"location":"intro-to-python/project/tasks/#task-6","text":"Make a function called flatten_people that flattens a list of people, but only uses them if they are happy Expected usage # Given people = [ { \"name\" : \"Andrew\" , \"age\" : \"5 years old\" , \"meals\" : [ { \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, ], \"happy\" : True , \"location\" : { \"city\" : \"Melbourne\" , \"coords\" : ( 1000 , 3002 )}, \"optional_nickname\" : \"Andy\" , }, { \"name\" : \"Jane\" , \"age\" : \"1 year old\" , \"meals\" : [ { \"name\" : \"celery\" , \"calories\" : - 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, ], \"happy\" : False , \"location\" : { \"city\" : \"New York\" , \"coords\" : ( 3009 , 10 )}, \"optional_nickname\" : \"Jan\" , }, ] flatten_people ( people ) # Should return [ { \"name\" : \"Andrew\" , \"age\" : 5 , \"meals\" : \"apples, pizza\" , \"calorie_intake\" : 1099.23 , \"happy\" : True , \"latitude\" : 1000 , \"longitude\" : 3002 , \"nickname\" : \"Andy\" , } ] Sample solution def flatten_people ( people ): happy_people = [] for person in people : if person [ \"happy\" ]: happy_people . append ( flatten_person ( person )) return happy_people","title":"Task 6"},{"location":"intro-to-python/project/tasks/#sprint-2","text":"","title":"\"Sprint\" 2"},{"location":"intro-to-python/project/tasks/#task-7","text":"Build a python data model class called Person that defines the information we will be receiving Expected usage [ { \"name\" : \"Andrew\" , \"age\" \"5 years old\" , \"meals\" : [ { \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 } ], \"happy\" : true , \"location\" : { \"city\" : \"Melbourne\" , \"coords\" : ( 1000 , 3002 ) }, \"optional_nickname\" : \"Andy\" } ] Sample solution from dataclasses import dataclass from typing import Optional , List , Tuple @dataclass class Meal : name : str calories : float @dataclass class Location : city : str coords : Tuple [ float , float ] @dataclass class Person : name : str age : str meals : List [ Meal ] happy : bool location : Location optional_nickname : Optional [ str ] Person ( ** { \"name\" : \"Andrew\" , \"age\" : \"5 years old\" , \"meals\" : [ { \"name\" : \"pizza\" , \"calories\" : 999.23 }, { \"name\" : \"apples\" , \"calories\" : 50 }, { \"name\" : \"apples\" , \"calories\" : 50 }, ], \"happy\" : True , \"location\" : { \"city\" : \"Melbourne\" , \"coords\" : ( 1000 , 3002 )}, \"optional_nickname\" : \"Andy\" , } )","title":"Task 7"},{"location":"intro-to-python/project/tasks/#task-8","text":"Refactor your code to use multiple modules to tidy up","title":"Task 8"},{"location":"intro-to-python/project/tasks/#task-9","text":"Read in a JSON file with data to process and run it through your flatten_people function Sample solution import json with open ( \"data.json\" , \"r\" ) as f : people = json . load ( f ) flatten_people ( people )","title":"Task 9"},{"location":"intro-to-python/project/tasks/#task-10","text":"Write out the information you have processed through flatten_people function into a CSV file Sample solution import json import pandas as pd with open ( \"data.json\" , \"r\" ) as f : people = json . load ( f ) flattened = flatten_people ( people ) data = pd . DataFrame ( flattened ) data . to_csv ( \"flattened_people.csv\" )","title":"Task 10"},{"location":"intro-to-python/project/tasks/#sprint-3","text":"","title":"\"Sprint\" 3"},{"location":"intro-to-python/project/tasks/#task-11","text":"Add type annotations to your user defined functions","title":"Task 11"},{"location":"intro-to-python/project/tasks/#task-12","text":"Add docstrings and inline comments to your user defined functions","title":"Task 12"},{"location":"intro-to-python/project/tasks/#task-13","text":"Create a README.md defining how to use your ETL program","title":"Task 13"},{"location":"intro-to-python/project/tasks/#task-14","text":"Create unit tests for your user defined functions with edge cases and ensure 100% coverage","title":"Task 14"},{"location":"intro-to-python/project/tasks/#task-15","text":"Ensure your code is well formatted and passes standard linting rules","title":"Task 15"},{"location":"intro-to-python/project/tasks/#sprint-4","text":"","title":"\"Sprint\" 4"},{"location":"intro-to-python/project/tasks/#task-16","text":"Build your program into a commandline application using typer or pick","title":"Task 16"},{"location":"intro-to-python/project/tasks/#task-17","text":"Add in error handling so that users that misuse your program get some feedback on how they can correct their mistakes","title":"Task 17"},{"location":"intro-to-python/project/tasks/#task-18","text":"Iterate on unit tests to uplift your coverage back to 100%","title":"Task 18"},{"location":"intro-to-python/project/tasks/#sprint-5","text":"","title":"\"Sprint\" 5"},{"location":"intro-to-python/project/tasks/#task-19","text":"Add version control to your project by making it into a git repository","title":"Task 19"},{"location":"intro-to-python/project/tasks/#task-20","text":"Push your application to GitHub so that you can work collaboratively with others on the project","title":"Task 20"}]}